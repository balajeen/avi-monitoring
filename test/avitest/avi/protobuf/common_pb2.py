# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import options_pb2 as options__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='common.proto',
  package='',
  syntax='proto2',
  serialized_pb=_b('\n\x0c\x63ommon.proto\x1a\roptions.proto\"\x91\x01\n\tPortRange\x12\x43\n\x05start\x18\x01 \x02(\rB4\xa2\xa6\x1d%TCP/UDP port range start (inclusive).\xb2\xa6\x1d\x07\x31-65535\x12?\n\x03\x65nd\x18\x02 \x02(\rB2\xa2\xa6\x1d#TCP/UDP port range end (inclusive).\xb2\xa6\x1d\x07\x31-65535\"L\n\x03Tag\x12\r\n\x05value\x18\x01 \x02(\t\x12$\n\x04type\x18\x02 \x01(\x0e\x32\x08.TagType:\x0cUSER_DEFINED:\x10\x8a\xa6\x1d\x03Tag\x9a\xa6\x1d\x05value\"\x94\x05\n\x13TenantConfiguration\x12\xfd\x01\n\ntenant_vrf\x18\x01 \x01(\x08:\x05\x66\x61lseB\xe1\x01\xa2\xa6\x1d\xdc\x01When \"Per Tenant IP Domain\" is selected, each tenant gets its own routing domain that is not shared with any other tenant. When \"Share IP Domain across all tenants\" is selected, all tenants share the same routing domain.\x12\xd0\x02\n\x16se_in_provider_context\x18\x03 \x01(\x08:\x04trueB\xa9\x02\xa2\xa6\x1d\xa4\x02\x43ontrols the ownership of ServiceEngines. Service Engines can either be exclusively owned by each tenant or owned by the administrator and shared by all tenants. When ServiceEngines are owned by the administrator, each tenant can have either read access or no access to their Service Engines.\x12*\n\x1ctenant_access_to_provider_se\x18\x04 \x01(\x08:\x04true\"\xd9\x01\n\x06Tenant\x12\x0c\n\x04uuid\x18\x01 \x02(\t\x12\x0c\n\x04name\x18\x02 \x02(\t\x12\x19\n\x05local\x18\x03 \x01(\x08:\x04trueB\x04\xf0\xa7\x1d\x01\x12\x13\n\x0b\x64\x65scription\x18\x04 \x01(\t\x12-\n\x0f\x63onfig_settings\x18\x05 \x01(\x0b\x32\x14.TenantConfiguration\x12.\n\ncreated_by\x18\x06 \x01(\tB\x1a\xa2\xa6\x1d\x16\x43reator of this tenant:$\xb2\xa6\x1d\x0bTenantCheck\xc2\xa6\x1d\rTenantDefault\xf8\x97\"\x01\"\x94\x01\n\x0bIpAddrRange\x12<\n\x05\x62\x65gin\x18\x01 \x02(\x0b\x32\x07.IpAddrB$\xa2\xa6\x1d Starting IP address of the range\x12\x38\n\x03\x65nd\x18\x02 \x02(\x0b\x32\x07.IpAddrB\"\xa2\xa6\x1d\x1e\x45nding IP address of the range:\r\x9a\xa6\x1d\tbegin,end\"\xa5\x01\n\rHTTPLocalFile\x12?\n\x0c\x63ontent_type\x18\x01 \x02(\tB)\xa2\xa6\x1d%Mime-type of the content in the file.\x12S\n\x0c\x66ile_content\x18\x02 \x02(\tB=\xa2\xa6\x1d\x35\x46ile content to used in the local HTTP response body.\xc0\xa7\x1d\x01\"\x0e\n\x0cVoidResponse\"\t\n\x07NullObj\"9\n\rPBDescription\x12\x13\n\tfile_name\x18\xe0\xd4\x03 \x02(\t\x12\x13\n\ttype_name\x18\xe1\xd4\x03 \x02(\t\"7\n\tTimeStamp\x12\x0c\n\x04secs\x18\x01 \x02(\x03\x12\r\n\x05usecs\x18\x02 \x02(\x03:\r\x8a\xa6\x1d\tTimeStamp\"\xb5\x01\n\x11OperationalStatus\x12 \n\x05state\x18\x01 \x01(\x0e\x32\x11.OperationalState\x12\x0e\n\x06reason\x18\x02 \x03(\t\x12\x13\n\x0breason_code\x18\x03 \x01(\x04\x12%\n\x11last_changed_time\x18\x04 \x01(\x0b\x32\n.TimeStamp\x12\x1a\n\x12reason_code_string\x18\x05 \x01(\t:\x16\x8a\xa6\x1d\x12Operational Status\"\xec\x01\n\x13\x43onfigurationStatus\x12-\n\x05state\x18\x01 \x02(\x0e\x32\x13.ConfigurationState:\tCONFIG_UP\x12\x0e\n\x06reason\x18\x02 \x03(\t\x12\x13\n\x0breason_code\x18\x03 \x01(\x04\x12%\n\x11last_changed_time\x18\x04 \x01(\x0b\x32\n.TimeStamp\x12\x10\n\x08pvt_data\x18\x05 \x01(\x03\x12\x12\n\npvt_data_2\x18\x06 \x01(\x03\x12\x1a\n\x12reason_code_string\x18\x07 \x01(\t:\x18\x8a\xa6\x1d\x14\x43onfiguration Status\"^\n\x11\x42\x61seObjectRuntime\x12\x0e\n\x04uuid\x18\xd0\x86\x03 \x02(\t\x12\x10\n\x04name\x18\xd1\x86\x03 \x01(\t:\x00\x12\x0e\n\x04slug\x18\xd2\x86\x03 \x01(\t\x12\x17\n\x0btenant_uuid\x18\xd3\x86\x03 \x01(\t:\x00\"=\n\x0fvCenterDefaults\x12*\n\x14\x61vi_internal_network\x18\x01 \x01(\t:\x0c\x41vi Internal\"6\n\x07\x41ppInfo\x12\x14\n\x0c\x61pp_hdr_name\x18\x01 \x02(\t\x12\x15\n\rapp_hdr_value\x18\x02 \x02(\t\"a\n\nPoolUpdate\x12\x1b\n\x06\x61\x63tion\x18\x01 \x02(\x0e\x32\x0b.PoolAction\x12\x10\n\x08obj_uuid\x18\x02 \x02(\t\x12\x12\n\nserver_ips\x18\x03 \x03(\t\x12\x10\n\x08vrf_uuid\x18\x04 \x01(\t\"t\n\x0cServerFilter\x12\x1a\n\tserver_ip\x18\x01 \x01(\x0b\x32\x07.IpAddr\x12\x13\n\x0bserver_mask\x18\x02 \x01(\x05\x12\x1e\n\rserver_end_ip\x18\x03 \x01(\x0b\x32\x07.IpAddr\x12\x13\n\x0bserver_port\x18\x04 \x01(\x05\"\xff\x01\n\nIpAddrPort\x12X\n\x02ip\x18\x01 \x01(\x0b\x32\x07.IpAddrBC\xa2\xa6\x1d?IP Address of host. One of IP address or hostname should be set\x12\x32\n\x04port\x18\x02 \x02(\rB$\xa2\xa6\x1d\x15Port number of server\xb2\xa6\x1d\x07\x31-65535\x12U\n\x08hostname\x18\x03 \x01(\tBC\xa2\xa6\x1d?Hostname of server. One of IP address or hostname should be set\x12\x0c\n\x04name\x18\x04 \x01(\t\"c\n\x0c\x43ustomParams\x12\x0c\n\x04name\x18\x01 \x02(\t\x12\r\n\x05value\x18\x02 \x01(\t\x12\x1b\n\x0cis_sensitive\x18\x03 \x01(\x08:\x05\x66\x61lse\x12\x19\n\nis_dynamic\x18\x04 \x01(\x08:\x05\x66\x61lse\"\x86\x02\n\x07GcpInfo\x12\x33\n\x07project\x18\x01 \x02(\tB\"\xa2\xa6\x1d\x1aProject this SE belongs to\xf0\xa7\x1d\x01\x12-\n\x04zone\x18\x02 \x02(\tB\x1f\xa2\xa6\x1d\x17Zone this SE is part of\xf0\xa7\x1d\x01\x12\x34\n\x07network\x18\x03 \x02(\tB#\xa2\xa6\x1d\x1bNetwork this SE is assigned\xf0\xa7\x1d\x01\x12\x32\n\x06subnet\x18\x04 \x01(\tB\"\xa2\xa6\x1d\x1aSubnet assigned to this SE\xf0\xa7\x1d\x01\x12-\n\x08hostname\x18\x05 \x01(\tB\x1b\xa2\xa6\x1d\x13Hostname of this SE\xf0\xa7\x1d\x01\"+\n\x0c\x44\x65leteFilter\x12\x1b\n\x0c\x66orce_delete\x18\x01 \x01(\x08:\x05\x66\x61lse\"\x9c\x01\n\tNsxSgInfo\x12\x42\n\x04name\x18\x01 \x02(\tB4\xea\xa7\x1d\x06\x31\x37.1.1\xa2\xa6\x1d&Name of the NSX Manager Security Group\x12K\n\tobject_id\x18\x02 \x02(\tB8\xea\xa7\x1d\x06\x31\x37.1.1\xa2\xa6\x1d*NSX Manager objectId of the Security Group\"\xb6\x04\n\x0bGeoLocation\x12\xab\x01\n\x08latitude\x18\x01 \x01(\x02\x42\x98\x01\xea\xa7\x1d\x06\x31\x37.1.1\x92\x88\'\x04\x66ull\xa2\xa6\x1dsLatitude of the location. This is represented as degrees.minutes. The range is from -90.0 (south) to +90.0 (north).\xb2\xa6\x1d\x0b-90.0-+90.0\x12\xaf\x01\n\tlongitude\x18\x02 \x01(\x02\x42\x9b\x01\xea\xa7\x1d\x06\x31\x37.1.1\x92\x88\'\x04\x66ull\xa2\xa6\x1dtLongitude of the location. This is represented as degrees.minutes. The range is from -180.0 (west) to +180.0 (east).\xb2\xa6\x1d\r-180.0-+180.0\x12h\n\x04name\x18\x03 \x01(\tBZ\xe8\xa6\x1d\x80\x01\x92\x88\'\x04\x66ull\x8a\x88\'\x0c\x61lphabetical\xea\xa7\x1d\x06\x31\x37.1.1\xa2\xa6\x1d/Location name in the format Country/State/City.\x12]\n\x03tag\x18\x04 \x01(\tBP\xe8\xa6\x1d \x92\x88\'\x04\x66ull\x8a\x88\'\x0c\x61lphabetical\xea\xa7\x1d\x06\x31\x37.1.1\xa2\xa6\x1d&Location tag string - example: USEast.\"n\n\x08Property\x12*\n\x04name\x18\x01 \x02(\tB\x1c\xa2\xa6\x1d\x0eProperty name.\xea\xa7\x1d\x06\x31\x37.2.1\x12,\n\x05value\x18\x02 \x01(\tB\x1d\xa2\xa6\x1d\x0fProperty value.\xea\xa7\x1d\x06\x31\x37.2.1:\x08\x9a\xa6\x1d\x04name\"-\n\tCustomTag\x12\x0f\n\x07tag_key\x18\x01 \x02(\t\x12\x0f\n\x07tag_val\x18\x02 \x01(\t\"T\n\x10PlacementNetwork\x12!\n\x0cnetwork_uuid\x18\x01 \x02(\tB\x0b\x82\xa7\x1d\x07Network\x12\x1d\n\x06subnet\x18\x02 \x01(\x0b\x32\r.IpAddrPrefix\"k\n\x0fSeNetworkSubnet\x12-\n\x0cnetwork_uuid\x18\x01 \x01(\t:\x00\x42\x15\xaa\xa7\x1d\x07Network\xea\xa7\x1d\x06\x31\x37.2.4\x12)\n\x06subnet\x18\x02 \x01(\x0b\x32\r.IpAddrPrefixB\n\xea\xa7\x1d\x06\x31\x37.2.4*\xdb,\n\rAviObjectType\x12\x13\n\x0eVIRTUALSERVICE\x10\xe9\x07\x12\t\n\x04POOL\x10\xea\x07\x12\x12\n\rHEALTHMONITOR\x10\xeb\x07\x12\x13\n\x0eNETWORKPROFILE\x10\xec\x07\x12\x17\n\x12\x41PPLICATIONPROFILE\x10\xed\x07\x12\x12\n\rHTTPPOLICYSET\x10\xee\x07\x12\x0e\n\tDNSPOLICY\x10\xef\x07\x12\x10\n\x0bIPADDRGROUP\x10\xf1\x07\x12\x10\n\x0bSTRINGGROUP\x10\xf2\x07\x12\x0f\n\nSSLPROFILE\x10\xf3\x07\x12\x19\n\x14SSLKEYANDCERTIFICATE\x10\xf4\x07\x12\x1a\n\x15NETWORKSECURITYPOLICY\x10\xf5\x07\x12\"\n\x1d\x41PPLICATIONPERSISTENCEPROFILE\x10\xf6\x07\x12\x15\n\x10\x41NALYTICSPROFILE\x10\xf7\x07\x12\x14\n\x0fVSDATASCRIPTSET\x10\xf8\x07\x12\x0b\n\x06TENANT\x10\xf9\x07\x12\x0f\n\nPKIPROFILE\x10\xfa\x07\x12\x10\n\x0b\x41UTHPROFILE\x10\xfb\x07\x12\n\n\x05\x43LOUD\x10\xfc\x07\x12\x1a\n\x15SERVERAUTOSCALEPOLICY\x10\xfd\x07\x12\x1a\n\x15\x41UTOSCALELAUNCHCONFIG\x10\xfe\x07\x12\x16\n\x11MICROSERVICEGROUP\x10\xff\x07\x12\x10\n\x0bIPAMPROFILE\x10\x80\x08\x12 \n\x1bHARDWARESECURITYMODULEGROUP\x10\x81\x08\x12\x0e\n\tPOOLGROUP\x10\x82\x08\x12\x13\n\x0ePRIORITYLABELS\x10\x83\x08\x12\x1e\n\x19POOLGROUPDEPLOYMENTPOLICY\x10\x84\x08\x12\x10\n\x0bGSLBSERVICE\x10\x85\x08\x12\x17\n\x12GSLBSERVICERUNTIME\x10\x87\x08\x12\x0e\n\tSCHEDULER\x10\x88\x08\x12\x15\n\x10GSLBGEODBPROFILE\x10\x89\x08\x12&\n!GSLBAPPLICATIONPERSISTENCEPROFILE\x10\x8a\x08\x12\x18\n\x13TRAFFICCLONEPROFILE\x10\x8b\x08\x12\n\n\x05VSVIP\x10\x8c\x08\x12\x0e\n\tWAFPOLICY\x10\x8d\x08\x12\x0f\n\nWAFPROFILE\x10\x8e\x08\x12\x15\n\x10\x45RRORPAGEPROFILE\x10\x8f\x08\x12\x12\n\rERRORPAGEBODY\x10\x90\x08\x12\x10\n\x0bL4POLICYSET\x10\x91\x08\x12\x12\n\rSERVICEENGINE\x10\xdc\x0b\x12\x17\n\x12\x44\x45\x42UGSERVICEENGINE\x10\xdd\x0b\x12\x14\n\x0f\x44\x45\x42UGCONTROLLER\x10\xde\x0b\x12\x18\n\x13\x44\x45\x42UGVIRTUALSERVICE\x10\xdf\x0b\x12\x17\n\x12SERVICEENGINEGROUP\x10\xe0\x0b\x12\x11\n\x0cSEPROPERTIES\x10\xe1\x0b\x12\x0c\n\x07NETWORK\x10\xe2\x0b\x12\x13\n\x0e\x43ONTROLLERNODE\x10\xe3\x0b\x12\x19\n\x14\x43ONTROLLERPROPERTIES\x10\xe4\x0b\x12\x18\n\x13SYSTEMCONFIGURATION\x10\xe5\x0b\x12\x0f\n\nVRFCONTEXT\x10\xe6\x0b\x12\t\n\x04USER\x10\xe7\x0b\x12\x10\n\x0b\x41LERTCONFIG\x10\xe8\x0b\x12\x16\n\x11\x41LERTSYSLOGCONFIG\x10\xe9\x0b\x12\x15\n\x10\x41LERTEMAILCONFIG\x10\xea\x0b\x12\x14\n\x0f\x41LERTTYPECONFIG\x10\xeb\x0b\x12\x10\n\x0b\x41PPLICATION\x10\xec\x0b\x12\t\n\x04ROLE\x10\xed\x0b\x12\x14\n\x0f\x43LOUDPROPERTIES\x10\xee\x0b\x12\x14\n\x0fSNMPTRAPPROFILE\x10\xef\x0b\x12\x17\n\x12\x41\x43TIONGROUPPROFILE\x10\xf0\x0b\x12\x11\n\x0cMICROSERVICE\x10\xf1\x0b\x12\x10\n\x0b\x41LERTPARAMS\x10\xf2\x0b\x12\x16\n\x11\x41\x43TIONGROUPCONFIG\x10\xf3\x0b\x12\x17\n\x12\x43LOUDCONNECTORUSER\x10\xf4\x0b\x12\t\n\x04GSLB\x10\xf5\x0b\x12\x12\n\rGSLBDNSUPDATE\x10\xf6\x0b\x12\x10\n\x0bGSLBSITEOPS\x10\xf7\x0b\x12\x14\n\x0fGLBMGRWARMSTART\x10\xf8\x0b\x12\x12\n\rIPAMDNSRECORD\x10\xfb\x0b\x12\x14\n\x0fGSLBDNSGSSTATUS\x10\xfc\x0b\x12\x16\n\x11GSLBDNSGEOFILEOPS\x10\xfd\x0b\x12\x15\n\x10GSLBDNSGEOUPDATE\x10\xfe\x0b\x12\x19\n\x14GSLBDNSGEOCLUSTEROPS\x10\xff\x0b\x12\x13\n\x0eGSLBDNSCLEANUP\x10\x80\x0c\x12\x16\n\x11GSLBSITEOPSRESYNC\x10\x81\x0c\x12\x13\n\x0eTCPSTATRUNTIME\x10\xd1\x0f\x12\x13\n\x0eUDPSTATRUNTIME\x10\xe1\x0f\x12\x12\n\rIPSTATRUNTIME\x10\xe2\x0f\x12\x13\n\x0e\x41RPSTATRUNTIME\x10\xe3\x0f\x12\x12\n\rMBSTATRUNTIME\x10\xe4\x0f\x12\x17\n\x12IPSTKQSTATSRUNTIME\x10\xe5\x0f\x12\x16\n\x11MALLOCSTATRUNTIME\x10\xe6\x0f\x12\x18\n\x13SHMALLOCSTATRUNTIME\x10\xe7\x0f\x12\x14\n\x0f\x43PUUSAGERUNTIME\x10\xe8\x0f\x12\x19\n\x14L7GLOBALSTATSRUNTIME\x10\xe9\x0f\x12!\n\x1cL7VIRTUALSERVICESTATSRUNTIME\x10\xea\x0f\x12\x19\n\x14SEAGENTVNICDBRUNTIME\x10\xeb\x0f\x12\x1a\n\x15SEAGENTGRAPHDBRUNTIME\x10\xec\x0f\x12\x18\n\x13SEAGENTSTATERUNTIME\x10\xed\x0f\x12\x15\n\x10INTERFACERUNTIME\x10\xee\x0f\x12\x14\n\x0f\x41RPTABLERUNTIME\x10\xef\x0f\x12\x1a\n\x15\x44ISPATCHERSTATRUNTIME\x10\xf0\x0f\x12\x1f\n\x1a\x44ISPATCHERSTATCLEARRUNTIME\x10\xf1\x0f\x12\x1f\n\x1a\x44ISPATCHERTABLEDUMPRUNTIME\x10\xf2\x0f\x12)\n$DISPATCHERREMOTETIMERLISTDUMPRUNTIME\x10\xf3\x0f\x12\x18\n\x13METRICSAGENTMESSAGE\x10\xf4\x0f\x12\x1d\n\x18HEALTHMONITORSTATRUNTIME\x10\xf5\x0f\x12\x19\n\x14METRICSENTITYRUNTIME\x10\xf6\x0f\x12\x18\n\x13PERSISTENCEINTERNAL\x10\xf7\x0f\x12\x1a\n\x15HTTPPOLICYSETINTERNAL\x10\xf8\x0f\x12\x16\n\x11\x44NSPOLICYINTERNAL\x10\xf9\x0f\x12\x1a\n\x15\x43ONNECTIONDUMPRUNTIME\x10\xfb\x0f\x12\x12\n\rSHAREDDBSTATS\x10\xfc\x0f\x12\x17\n\x12SHAREDDBSTATSCLEAR\x10\xfd\x0f\x12\x14\n\x0fICMPSTATRUNTIME\x10\xfe\x0f\x12\x16\n\x11ROUTETABLERUNTIME\x10\xff\x0f\x12\x13\n\x0eVIRTUALMACHINE\x10\x80\x10\x12\x0f\n\nPOOLSERVER\x10\x81\x10\x12\r\n\x08SEVSLIST\x10\x82\x10\x12\x13\n\x0eMEMINFORUNTIME\x10\x83\x10\x12\x17\n\x12RTERINGSTATRUNTIME\x10\x84\x10\x12\x14\n\x0f\x41LGOSTATRUNTIME\x10\x85\x10\x12\x19\n\x14HEALTHMONITORRUNTIME\x10\x86\x10\x12\x13\n\x0e\x43PUSTATRUNTIME\x10\x87\x10\x12\t\n\x04SEVM\x10\x88\x10\x12\t\n\x04HOST\x10\x89\x10\x12\x0e\n\tPORTGROUP\x10\x8a\x10\x12\x0c\n\x07\x43LUSTER\x10\x8b\x10\x12\x0f\n\nDATACENTER\x10\x8c\x10\x12\x0c\n\x07VCENTER\x10\x8d\x10\x12\x17\n\x12HTTPPOLICYSETSTATS\x10\x8e\x10\x12\x13\n\x0e\x44NSPOLICYSTATS\x10\x8f\x10\x12\x13\n\x0eMETRICSSESTATS\x10\x91\x10\x12\x1b\n\x16RATELIMITERSTATRUNTIME\x10\x92\x10\x12\x1f\n\x1aNETWORKSECURITYPOLICYSTATS\x10\x93\x10\x12\x13\n\x0eTCPCONNRUNTIME\x10\x94\x10\x12\x0e\n\tPOOLSTATS\x10\x95\x10\x12\x15\n\x10\x43ONNPOOLINTERNAL\x10\x96\x10\x12\x12\n\rCONNPOOLSTATS\x10\x97\x10\x12\x16\n\x11VSHASHSHOWRUNTIME\x10\x98\x10\x12\x16\n\x11SELOGSTATSRUNTIME\x10\x99\x10\x12 \n\x1bNETWORKSECURITYPOLICYDETAIL\x10\x9a\x10\x12\x13\n\x0eLICENSERUNTIME\x10\x9b\x10\x12\x12\n\rSERVERRUNTIME\x10\x9c\x10\x12\x1a\n\x15METRICSRUNTIMESUMMARY\x10\x9d\x10\x12\x19\n\x14METRICSRUNTIMEDETAIL\x10\x9e\x10\x12*\n%DISPATCHERSEHMPROBETEMPDISABLERUNTIME\x10\x9f\x10\x12\x0e\n\tPOOLDEBUG\x10\xa0\x10\x12\x10\n\x0bVSLOGMGRMAP\x10\xa1\x10\x12\x18\n\x13SERUMINSERTIONSTATS\x10\xa2\x10\x12\x0e\n\tHTTPCACHE\x10\xa3\x10\x12\x13\n\x0eHTTPCACHESTATS\x10\xa4\x10\x12\x15\n\x10SEDOSSTATRUNTIME\x10\xa5\x10\x12\x15\n\x10VSDOSSTATRUNTIME\x10\xa6\x10\x12\x14\n\x0fSERVERUPDATEREQ\x10\xa7\x10\x12\x13\n\x0eVSSCALEOUTLIST\x10\xa8\x10\x12\x15\n\x10SEMEMDISTRUNTIME\x10\xa9\x10\x12\x19\n\x14TCPCONNRUNTIMEDETAIL\x10\xaa\x10\x12\x14\n\x0fSEUPGRADESTATUS\x10\xab\x10\x12\x15\n\x10SEUPGRADEPREVIEW\x10\xac\x10\x12\x1a\n\x15SEFAULTINJECTEXHAUSTM\x10\xad\x10\x12\x1c\n\x17SEFAULTINJECTEXHAUSTMCL\x10\xae\x10\x12!\n\x1cSEFAULTINJECTEXHAUSTMCLSMALL\x10\xaf\x10\x12\x1d\n\x18SEFAULTINJECTEXHAUSTCONN\x10\xb0\x10\x12\x18\n\x13SEHEADLESSONLINEREQ\x10\xb1\x10\x12\x0e\n\tSEUPGRADE\x10\xb2\x10\x12\x1a\n\x15SEUPGRADESTATUSDETAIL\x10\xb3\x10\x12\x11\n\x0cSERESERVEDVS\x10\xb4\x10\x12\x16\n\x11SERESERVEDVSCLEAR\x10\xb5\x10\x12\x1a\n\x15VSCANDIDATESEHOSTLIST\x10\xb6\x10\x12\x13\n\x0eSEGROUPUPGRADE\x10\xb7\x10\x12\x0e\n\tREBALANCE\x10\xb8\x10\x12\x15\n\x10SEGROUPREBALANCE\x10\xb9\x10\x12\x17\n\x12SEAUTHSTATSRUNTIME\x10\xba\x10\x12\x13\n\x0e\x41UTOSCALESTATE\x10\xbb\x10\x12\x1c\n\x17VIRTUALSERVICEAUTHSTATS\x10\xbc\x10\x12\x1d\n\x18NETWORKSECURITYPOLICYDOS\x10\xbd\x10\x12\x13\n\x0eKEYVALINTERNAL\x10\xbe\x10\x12\x1a\n\x15KEYVALSUMMARYINTERNAL\x10\xbf\x10\x12\x1a\n\x15SERVERSTATEUPDATEINFO\x10\xc0\x10\x12\x14\n\x0f\x43LTRACKINTERNAL\x10\xc1\x10\x12\x1b\n\x16\x43LTRACKSUMMARYINTERNAL\x10\xc2\x10\x12\x18\n\x13MICROSERVICERUNTIME\x10\xc3\x10\x12\x13\n\x0eSEMICROSERVICE\x10\xc4\x10\x12\x1b\n\x16VIRTUALSERVICEANALYSIS\x10\xc5\x10\x12\x13\n\x0e\x43LIENTINTERNAL\x10\xc6\x10\x12\x1a\n\x15\x43LIENTSUMMARYINTERNAL\x10\xc7\x10\x12\x1d\n\x18MICROSERVICEGROUPRUNTIME\x10\xc8\x10\x12\x0f\n\nBGPRUNTIME\x10\xc9\x10\x12\x18\n\x13REQUESTQUEUERUNTIME\x10\xca\x10\x12\x0f\n\nMIGRATEALL\x10\xcb\x10\x12\x1c\n\x17MIGRATEALLSTATUSSUMMARY\x10\xcc\x10\x12\x1b\n\x16MIGRATEALLSTATUSDETAIL\x10\xcd\x10\x12\x1c\n\x17INTERFACESUMMARYRUNTIME\x10\xce\x10\x12\x19\n\x14INTERFACELACPRUNTIME\x10\xcf\x10\x12\r\n\x08\x44NSTABLE\x10\xd0\x10\x12\x16\n\x11GSLBSERVICEDETAIL\x10\xd1\x10\x12\x18\n\x13GSLBSERVICEINTERNAL\x10\xd2\x10\x12\x18\n\x13GSLBSERVICEHMONSTAT\x10\xd3\x10\x12\x14\n\x0fSETROLESREQUEST\x10\xd4\x10\x12\x18\n\x13TRAFFICCLONERUNTIME\x10\xd5\x10\x12\x14\n\x0fGEOLOCATIONINFO\x10\xd6\x10\x12\x16\n\x11SEVSHBSTATRUNTIME\x10\xd7\x10\x12\x12\n\rGEODBINTERNAL\x10\xd8\x10\x12\x15\n\x10GSLBSITEINTERNAL\x10\xd9\x10\x12\r\n\x08WAFSTATS\x10\xda\x10\x12\"\n\x1dUSERDEFINEDDATASCRIPTCOUNTERS\x10\xdb\x10\x12\x10\n\x0bLLDPRUNTIME\x10\xdc\x10\x12\x14\n\x0fVSESSHARINGPOOL\x10\xdd\x10\x12\x13\n\x0eSEVSSPLACEMENT\x10\xe1\x10\x12\x15\n\x10L4POLICYSETSTATS\x10\xe2\x10\x12\x18\n\x13L4POLICYSETINTERNAL\x10\xe3\x10\x12\x14\n\x0fSERESOURCEPROTO\x10\xb9\x17\x12\x14\n\x0fSECONSUMERPROTO\x10\xba\x17\x12\x19\n\x14SECREATEPENDINGPROTO\x10\xbb\x17\x12\x13\n\x0ePLACEMENTSTATS\x10\xbc\x17\x12\x0f\n\nSEVIPPROTO\x10\xbd\x17\x12\x0f\n\nRMVRFPROTO\x10\xbe\x17\x12\x0f\n\nVCENTERMAP\x10\xbf\x17\x12\x18\n\x13VIMGRVCENTERRUNTIME\x10\xc0\x17\x12\x12\n\rINTERESTEDVMS\x10\xc1\x17\x12\x14\n\x0fINTERESTEDHOSTS\x10\xc2\x17\x12\x1d\n\x18VCENTERSUPPORTEDCOUNTERS\x10\xc3\x17\x12\x13\n\x0e\x45NTITYCOUNTERS\x10\xc4\x17\x12\x15\n\x10TRANSACTIONSTATS\x10\xc5\x17\x12\x17\n\x12SEVMCREATEPROGRESS\x10\xc6\x17\x12\x14\n\x0fPLACEMENTSTATUS\x10\xc7\x17\x12\x11\n\x0cVISUBFOLDERS\x10\xc8\x17\x12\x10\n\x0bVIDATASTORE\x10\xc9\x17\x12\x14\n\x0fVIHOSTRESOURCES\x10\xca\x17\x12\x13\n\x0e\x43LOUDCONNECTOR\x10\xcc\x17\x12\x17\n\x12VINETWORKSUBNETVMS\x10\xcd\x17\x12\x18\n\x13VIDATASTORECONTENTS\x10\xce\x17\x12\x1d\n\x18VIMGRVCENTERCLOUDRUNTIME\x10\xcf\x17\x12\x18\n\x13VIVCENTERPORTGROUPS\x10\xd0\x17\x12\x19\n\x14VIVCENTERDATACENTERS\x10\xd1\x17\x12\x15\n\x10VIMGRHOSTRUNTIME\x10\xd2\x17\x12\x15\n\x10PLACEMENTGLOBALS\x10\xd3\x17\x12\x16\n\x11\x41PICCONFIGURATION\x10\xea\x17\x12\r\n\x08\x43IFTABLE\x10\xeb\x17\x12\x14\n\x0f\x41PICTRANSACTION\x10\xae\x1b\x12&\n!VIRTUALSERVICESTATEDBCACHESUMMARY\x10\xaf\x1b\x12\x1c\n\x17POOLSTATEDBCACHESUMMARY\x10\xb0\x1b\x12\x1e\n\x19SERVERSTATEDBCACHESUMMARY\x10\xb1\x1b\x12\x16\n\x11\x41PICAGENTINTERNAL\x10\xb2\x1b\x12\x18\n\x13\x41PICTRANSACTIONFLAP\x10\xb3\x1b\x12\x17\n\x12\x41PICGRAPHINSTANCES\x10\xb4\x1b\x12\r\n\x08\x41PICEPGS\x10\xb5\x1b\x12\x0f\n\nAPICEPGEPS\x10\xb6\x1b\x12\x15\n\x10\x41PICDEVICEPKGVER\x10\xb7\x1b\x12\x10\n\x0b\x41PICTENANTS\x10\xb8\x1b\x12\x13\n\x0e\x41PICVMMDOMAINS\x10\xb9\x1b\x12\x15\n\x10NSXCONFIGURATION\x10\xc5\x1b\x12\x0f\n\nNSXSGTABLE\x10\xc6\x1b\x12\x15\n\x10NSXAGENTINTERNAL\x10\xc7\x1b\x12\x0e\n\tNSXSGINFO\x10\xc8\x1b\x12\r\n\x08NSXSGIPS\x10\xc9\x1b\x12\x18\n\x13NSXAGENTINTERNALCLI\x10\xca\x1b\x12\x0f\n\nMAXOBJECTS\x10\xa0\x1f*5\n\x0e\x43onnectionType\x12\x08\n\x04\x42OTH\x10\x00\x12\x0c\n\x08\x46RONTEND\x10\x01\x12\x0b\n\x07\x42\x41\x43KEND\x10\x02*\xdf\x01\n\nHypervisor\x12\x0b\n\x07\x44\x45\x46\x41ULT\x10\x00\x12\x37\n\nVMWARE_ESX\x10\x01\x1a\'\x8a\x97\"\nVMWARE_ESX\x92\x97\"\x15VMware ESX Hypervisor\x12\"\n\x03KVM\x10\x02\x1a\x19\x8a\x97\"\x03KVM\x92\x97\"\x0eKVM Hypervisor\x12\x43\n\x0bVMWARE_VSAN\x10\x03\x1a\x32\x8a\x97\"\x0bVMWARE_VSAN\x92\x97\"\x1fVMware ESX Hypervisor with VSAN\x12\"\n\x03XEN\x10\x04\x1a\x19\x8a\x97\"\x03Xen\x92\x97\"\x0eXen Hypervisor*w\n\x0bImageFormat\x12\x0f\n\x0bIMG_FMT_OVA\x10\x01\x12\x11\n\rIMG_FMT_QCOW2\x10\x02\x12\x10\n\x0cIMG_FMT_VMDK\x10\x03\x12\x0f\n\x0bIMG_FMT_RAW\x10\x04\x12\x10\n\x0cIMG_FMT_FLAT\x10\x05\x12\x0f\n\x0bIMG_FMT_AMI\x10\x06*A\n\x07TagType\x12\x0f\n\x0b\x41VI_DEFINED\x10\x00\x12\x10\n\x0cUSER_DEFINED\x10\x01\x12\x13\n\x0fVCENTER_DEFINED\x10\x02*<\n\nIpAddrMode\x12\x08\n\x04\x44HCP\x10\x00\x12\n\n\x06STATIC\x10\x01\x12\x07\n\x03VIP\x10\x02\x12\x0f\n\x0b\x44OCKER_HOST\x10\x03*\xb7\x01\n\x0cProtocolType\x12\x31\n\x17PROTOCOL_TYPE_TCP_PROXY\x10\x00\x1a\x14\x8a\x97\"\tTCP Proxy\xba\x97\"\x03tcp\x12\x39\n\x1bPROTOCOL_TYPE_TCP_FAST_PATH\x10\x01\x1a\x18\x8a\x97\"\rTCP Fast Path\xba\x97\"\x03tcp\x12\x39\n\x1bPROTOCOL_TYPE_UDP_FAST_PATH\x10\x02\x1a\x18\x8a\x97\"\rUDP Fast Path\xba\x97\"\x03udp*P\n\x0cHTTPProtocol\x12\x1b\n\x04HTTP\x10\x00\x1a\x11\x92\x97\"\rHTTP Protocol\x12#\n\x05HTTPS\x10\x01\x1a\x18\x92\x97\"\x14Secure HTTP Protocol*\xcd\x02\n\nHTTPMethod\x12/\n\x0fHTTP_METHOD_GET\x10\x00\x1a\x1a\x8a\x97\"\x03GET\x92\x97\"\x0fHTTP get method\x12\x32\n\x10HTTP_METHOD_HEAD\x10\x01\x1a\x1c\x8a\x97\"\x04HEAD\x92\x97\"\x10HTTP head method\x12/\n\x0fHTTP_METHOD_PUT\x10\x02\x1a\x1a\x8a\x97\"\x03PUT\x92\x97\"\x0fHTTP put method\x12\x38\n\x12HTTP_METHOD_DELETE\x10\x03\x1a \x8a\x97\"\x06\x44\x45LETE\x92\x97\"\x12HTTP delete method\x12\x32\n\x10HTTP_METHOD_POST\x10\x04\x1a\x1c\x8a\x97\"\x04POST\x92\x97\"\x10HTTP post method\x12;\n\x13HTTP_METHOD_OPTIONS\x10\x05\x1a\"\x8a\x97\"\x07OPTIONS\x92\x97\"\x13HTTP options method*\xa9\x01\n\x0bHTTPVersion\x12\x33\n\tZERO_NINE\x10\x00\x1a$\x8a\x97\"\x03\x30.9\x92\x97\"\x19HTTP protocol version 0.9\x12\x32\n\x08ONE_ZERO\x10\x01\x1a$\x8a\x97\"\x03\x31.0\x92\x97\"\x19HTTP protocol version 1.0\x12\x31\n\x07ONE_ONE\x10\x02\x1a$\x8a\x97\"\x03\x31.1\x92\x97\"\x19HTTP protocol version 1.1*\xdd\x01\n\x16HTTPRedirectStatusCode\x12=\n\x1dHTTP_REDIRECT_STATUS_CODE_301\x10\xad\x02\x1a\x19\x92\x97\"\x15\x33\x30\x31 Moved Permanently\x12\x31\n\x1dHTTP_REDIRECT_STATUS_CODE_302\x10\xae\x02\x1a\r\x92\x97\"\t302 Found\x12Q\n\x1dHTTP_REDIRECT_STATUS_CODE_307\x10\xb3\x02\x1a-\x92\x97\")307 Moved Temporarily (only for HTTP/1.1)*\x9d\x02\n\x1bHTTPLocalResponseStatusCode\x12\x34\n#HTTP_LOCAL_RESPONSE_STATUS_CODE_200\x10\xc8\x01\x1a\n\x92\x97\"\x06\x32\x30\x30 OK\x12;\n#HTTP_LOCAL_RESPONSE_STATUS_CODE_403\x10\x93\x03\x1a\x11\x92\x97\"\r403 Forbidden\x12;\n#HTTP_LOCAL_RESPONSE_STATUS_CODE_404\x10\x94\x03\x1a\x11\x92\x97\"\r404 Not Found\x12N\n#HTTP_LOCAL_RESPONSE_STATUS_CODE_429\x10\xad\x03\x1a$\x92\x97\" 429 Too Many Requests (RFC 6585)*}\n\tMatchCase\x12\x34\n\tSENSITIVE\x10\x00\x1a%\x8a\x97\"\tSensitive\x92\x97\"\x14\x63\x61se sensitive match\x12:\n\x0bINSENSITIVE\x10\x01\x1a)\x8a\x97\"\x0bInsensitive\x92\x97\"\x16\x63\x61se insensitive match*\x8a\x01\n\x0eMatchOperation\x12\x35\n\x05IS_IN\x10\x00\x1a*\x8a\x97\"\x05Is in\x92\x97\"\x1dis in the configured value(s)\x12\x41\n\tIS_NOT_IN\x10\x01\x1a\x32\x8a\x97\"\tIs not in\x92\x97\"!is not in the configured value(s)*\x9c\x07\n\x11HdrMatchOperation\x12?\n\nHDR_EXISTS\x10\x01\x1a/\x8a\x97\"\x06\x45xists\x92\x97\"!header exists in the HTTP request\x12W\n\x12HDR_DOES_NOT_EXIST\x10\x02\x1a?\x8a\x97\"\x0e\x44oes not exist\x92\x97\")header does not exist in the HTTP request\x12W\n\x0fHDR_BEGINS_WITH\x10\x03\x1a\x42\x8a\x97\"\x0b\x42\x65gins with\x92\x97\"/header value begins with the configure value(s)\x12p\n\x17HDR_DOES_NOT_BEGIN_WITH\x10\x04\x1aS\x8a\x97\"\x13\x44oes not begin with\x92\x97\"8header value does not begins with the configure value(s)\x12K\n\x0cHDR_CONTAINS\x10\x05\x1a\x39\x8a\x97\"\x08\x43ontains\x92\x97\")header value contains configured value(s)\x12\x65\n\x14HDR_DOES_NOT_CONTAIN\x10\x06\x1aK\x8a\x97\"\x10\x44oes not contain\x92\x97\"3header value  does not contains configured value(s)\x12R\n\rHDR_ENDS_WITH\x10\x07\x1a?\x8a\x97\"\tEnds with\x92\x97\".header value ends with the configured value(s)\x12k\n\x15HDR_DOES_NOT_END_WITH\x10\x08\x1aP\x8a\x97\"\x11\x44oes not end with\x92\x97\"7header value does not ends with the configured value(s)\x12I\n\nHDR_EQUALS\x10\t\x1a\x39\x8a\x97\"\x06\x45quals\x92\x97\"+header value equals the configured value(s)\x12\x62\n\x12HDR_DOES_NOT_EQUAL\x10\n\x1aJ\x8a\x97\"\x0e\x44oes not equal\x92\x97\"4header value does not equals the configured value(s)*\xd8\x06\n\x0fStringOperation\x12G\n\x0b\x42\x45GINS_WITH\x10\x01\x1a\x36\x8a\x97\"\x0b\x42\x65gins with\x92\x97\"#begins with the configured value(s)\x12_\n\x13\x44OES_NOT_BEGIN_WITH\x10\x02\x1a\x46\x8a\x97\"\x13\x44oes not begin with\x92\x97\"+does not begin with the configured value(s)\x12>\n\x08\x43ONTAINS\x10\x03\x1a\x30\x8a\x97\"\x08\x43ontains\x92\x97\" contains the configured value(s)\x12V\n\x10\x44OES_NOT_CONTAIN\x10\x04\x1a@\x8a\x97\"\x10\x44oes not contain\x92\x97\"(does not contain the configured value(s)\x12\x41\n\tENDS_WITH\x10\x05\x1a\x32\x8a\x97\"\tEnds with\x92\x97\"!ends with the configured value(s)\x12Y\n\x11\x44OES_NOT_END_WITH\x10\x06\x1a\x42\x8a\x97\"\x11\x44oes not end with\x92\x97\")does not end with the configured value(s)\x12\x38\n\x06\x45QUALS\x10\x07\x1a,\x8a\x97\"\x06\x45quals\x92\x97\"\x1e\x65quals the configured value(s)\x12P\n\x0e\x44OES_NOT_EQUAL\x10\x08\x1a<\x8a\x97\"\x0e\x44oes not equal\x92\x97\"&does not equal the configured value(s)\x12`\n\x0bREGEX_MATCH\x10\t\x1aO\x8a\x97\"\x15Regex pattern matches\x92\x97\"2regex pattern matches with the configured value(s)\x12w\n\x14REGEX_DOES_NOT_MATCH\x10\n\x1a]\x8a\x97\"\x1cRegex pattern does not match\x92\x97\"9regex pattern does not match with the configured value(s)*a\n\x13QueryMatchOperation\x12J\n\x14QUERY_MATCH_CONTAINS\x10\x01\x1a\x30\x8a\x97\"\x08\x43ontains\x92\x97\" contains the configured value(s)*B\n\nAdminState\x12\x18\n\x07\x45NABLED\x10\x00\x1a\x0b\x8a\x97\"\x07\x45nabled\x12\x1a\n\x08\x44ISABLED\x10\x01\x1a\x0c\x8a\x97\"\x08\x44isabled*\xe7\x06\n\x10OperationalState\x12\x0b\n\x07OPER_UP\x10\x00\x12%\n\tOPER_DOWN\x10\x01\x1a\x16\x92\x97\"\x12Operationally down\x12\x37\n\rOPER_CREATING\x10\x02\x1a$\x92\x97\" Controller is Creating resources\x12O\n\x0eOPER_RESOURCES\x10\x03\x1a;\x92\x97\"7Controller is waiting for resources to become available\x12\x43\n\rOPER_INACTIVE\x10\x04\x1a\x30\x92\x97\",Controller is not attempting to place object\x12)\n\rOPER_DISABLED\x10\x05\x1a\x16\x92\x97\"\x12Object is Disabled\x12=\n\x0bOPER_UNUSED\x10\x06\x1a,\x92\x97\"(Object not attached to a Virtual Service\x12#\n\x0cOPER_UNKNOWN\x10\x07\x1a\x11\x92\x97\"\rUnknown state\x12\x13\n\x0fOPER_PROCESSING\x10\x08\x12\x15\n\x11OPER_INITIALIZING\x10\t\x12\x17\n\x13OPER_ERROR_DISABLED\x10\n\x12\x1f\n\x1bOPER_AWAIT_MANUAL_PLACEMENT\x10\x0b\x12+\n\x0eOPER_UPGRADING\x10\x0c\x1a\x17\x92\x97\"\x13Upgrade in progress\x12@\n\x12OPER_SE_PROCESSING\x10\r\x1a(\x92\x97\"$Service Engine is processing request\x12\x35\n\x10OPER_PARTITIONED\x10\x0e\x1a\x1f\x92\x97\"\x1bUnreachable from Controller\x12Q\n\x0eOPER_DISABLING\x10\x0f\x1a=\x92\x97\"9Service Engine awaiting Migration of all Virtual Services\x12.\n\x0bOPER_FAILED\x10\x10\x1a\x1d\x92\x97\"\x19\x43urrently in failed state\x12\x32\n\x0cOPER_UNAVAIL\x10\x19\x1a \x92\x97\"\x1cObject status is unavailable*\xe6\x02\n\x12\x43onfigurationState\x12\r\n\tCONFIG_UP\x10\x00\x12\x0f\n\x0b\x43ONFIG_DOWN\x10\x01\x12\x13\n\x0f\x43ONFIG_CREATING\x10\x02\x12\x14\n\x10\x43ONFIG_RESOURCES\x10\x03\x12\x13\n\x0f\x43ONFIG_INACTIVE\x10\x04\x12\x13\n\x0f\x43ONFIG_DISABLED\x10\x05\x12\x11\n\rCONFIG_UNUSED\x10\x06\x12\x12\n\x0e\x43ONFIG_UNKNOWN\x10\x07\x12\x15\n\x11\x43ONFIG_PROCESSING\x10\x08\x12\x17\n\x13\x43ONFIG_INITIALIZING\x10\t\x12\x19\n\x15\x43ONFIG_ERROR_DISABLED\x10\n\x12!\n\x1d\x43ONFIG_AWAIT_MANUAL_PLACEMENT\x10\x0b\x12\x14\n\x10\x43ONFIG_UPGRADING\x10\x0c\x12\x18\n\x14\x43ONFIG_SE_PROCESSING\x10\r\x12\x16\n\x12\x43ONFIG_PARTITIONED\x10\x0e*o\n\tPrivilege\x12\x1c\n\tNO_ACCESS\x10\x00\x1a\r\x8a\x97\"\tNo Access\x12 \n\x0bREAD_ACCESS\x10\x01\x1a\x0f\x8a\x97\"\x0bRead Access\x12\"\n\x0cWRITE_ACCESS\x10\x02\x1a\x10\x8a\x97\"\x0cWrite Access*\xb2\x02\n\x10ResourceCategory\x12\x32\n\x1dRESOURCE_CATEGORY_APPLICATION\x10\x00\x1a\x0f\x8a\x97\"\x0b\x41pplication\x12*\n\x19RESOURCE_CATEGORY_ACCOUNT\x10\x01\x1a\x0b\x8a\x97\"\x07\x41\x63\x63ount\x12,\n\x1aRESOURCE_CATEGORY_PROFILES\x10\x02\x1a\x0c\x8a\x97\"\x08Profiles\x12\x38\n RESOURCE_CATEGORY_INFRASTRUCTURE\x10\x03\x1a\x12\x8a\x97\"\x0eInfrastructure\x12(\n\x18RESOURCE_CATEGORY_SYSTEM\x10\x04\x1a\n\x8a\x97\"\x06System\x12,\n\x1aRESOURCE_CATEGORY_SECURITY\x10\x05\x1a\x0c\x8a\x97\"\x08Security*>\n\nPoolAction\x12\x17\n\x13POOL_ACTION_UPDATED\x10\x01\x12\x17\n\x13POOL_ACTION_DELETED\x10\x02*\x96\t\n\rHTTPPolicyVar\x12S\n\x19HTTP_POLICY_VAR_CLIENT_IP\x10\x01\x1a\x34\x92\x97\"0Variable to get client IP address of the request\x12Y\n\x17HTTP_POLICY_VAR_VS_PORT\x10\x02\x1a<\x92\x97\"8Variable to get virtual service port the request came on\x12\x65\n\x15HTTP_POLICY_VAR_VS_IP\x10\x03\x1aJ\x92\x97\"FVariable to get IP address of the virtual service the request came for\x12^\n\x18HTTP_POLICY_VAR_HTTP_HDR\x10\x04\x1a@\x92\x97\"<Variable to get value of the HTTP header in the HTTP request\x12R\n&HTTP_POLICY_VAR_SSL_CLIENT_FINGERPRINT\x10\x05\x1a&\x92\x97\"\"SSL Client Certificate fingerprint\x12O\n!HTTP_POLICY_VAR_SSL_CLIENT_SERIAL\x10\x06\x1a(\x92\x97\"$SSL Client Certificate serial number\x12M\n!HTTP_POLICY_VAR_SSL_CLIENT_ISSUER\x10\x07\x1a&\x92\x97\"\"SSL Client Certificate Issuer name\x12O\n\"HTTP_POLICY_VAR_SSL_CLIENT_SUBJECT\x10\x08\x1a\'\x92\x97\"#SSL Client Certificate Subject name\x12X\n\x1eHTTP_POLICY_VAR_SSL_CLIENT_RAW\x10\t\x1a\x34\x92\x97\"0The whole SSL client certificate in a PEM format\x12Q\n\x1cHTTP_POLICY_VAR_SSL_PROTOCOL\x10\n\x1a/\x92\x97\"+SSL protocol negotiated for this connection\x12J\n\x1fHTTP_POLICY_VAR_SSL_SERVER_NAME\x10\x0b\x1a%\x92\x97\"!Server name requested through SNI\x12W\n\x19HTTP_POLICY_VAR_USER_NAME\x10\x0c\x1a\x38\x92\x97\"4Username obtained from http request using basic auth\x12w\n\x1aHTTP_POLICY_VAR_SSL_CIPHER\x10\r\x1aW\x92\x97\"SCipher suite used for the SSL/TLS connection between the client and virtual service*\x96\x06\n\tCloudType\x12*\n\nCLOUD_NONE\x10\x00\x1a\x1a\x92\x97\"\x04None\xaa\x99\"\x06\x08\x03\x08\x02\x08\x05\x8a\x97\"\x04None\x12W\n\rCLOUD_VCENTER\x10\x01\x1a\x44\x92\x97\"\x1aVMware vCenter/vSphere ESX\xaa\x99\"\x04\x08\x03\x08\x05\x8a\x97\"\x1aVMware vCenter/vSphere ESX\x12\x37\n\x0f\x43LOUD_OPENSTACK\x10\x02\x1a\"\x92\x97\"\tOpenStack\xaa\x99\"\x04\x08\x03\x08\x05\x8a\x97\"\tOpenStack\x12\x35\n\tCLOUD_AWS\x10\x03\x1a&\x92\x97\"\x13\x41mazon Web Services\xaa\x99\"\x04\x08\x03\x08\x05\x8a\x97\"\x03\x41WS\x12:\n\tCLOUD_VCA\x10\x05\x1a+\x92\x97\"\x11VMware vCloud Air\xaa\x99\"\x04\x08\x03\x08\x05\x8a\x97\"\nvCloud Air\x12(\n\nCLOUD_APIC\x10\x06\x1a\x18\x92\x97\"\x04\x41pic\xaa\x99\"\x04\x08\x03\x08\x05\x8a\x97\"\x04\x41pic\x12-\n\x0b\x43LOUD_MESOS\x10\x07\x1a\x1c\x92\x97\"\x05Mesos\xaa\x99\"\x06\x08\x04\x08\x03\x08\x05\x8a\x97\"\x05Mesos\x12\x41\n\x11\x43LOUD_LINUXSERVER\x10\x08\x1a*\x92\x97\"\x0cLinux Server\xaa\x99\"\x06\x08\x03\x08\x02\x08\x05\x8a\x97\"\x0cLinux Server\x12\x64\n\x10\x43LOUD_DOCKER_UCP\x10\t\x1aN\x92\x97\"\x1e\x44ocker Universal Control Plane\xaa\x99\"\x06\x08\x04\x08\x03\x08\x05\x8a\x97\"\x1e\x44ocker Universal Control Plane\x12?\n\rCLOUD_RANCHER\x10\n\x1a,\x92\x97\"\rRancher Cloud\xaa\x99\"\x06\x08\x04\x08\x03\x08\x05\x8a\x97\"\rRancher Cloud\x12\\\n\x10\x43LOUD_OSHIFT_K8S\x10\x0b\x1a\x46\x92\x97\"\x1aOpenShift/Kubernetes Cloud\xaa\x99\"\x06\x08\x04\x08\x03\x08\x05\x8a\x97\"\x1aOpenShift/Kubernetes Cloud\x12\x37\n\x0b\x43LOUD_AZURE\x10\x0c\x1a&\x92\x97\"\x0b\x41zure Cloud\xaa\x99\"\x04\x08\x03\x08\x05\x8a\x97\"\x0b\x41zure Cloud*y\n\x08SeVerNum\x12\x38\n\x08SE_VER_1\x10\x01\x1a*\x92\x97\"&Ver 1 SE\'s create UUID from dmi_decode\x12\x33\n\x08SE_VER_2\x10\x02\x1a%\x92\x97\"!Ver 2 SE\'s create UUID from vNic0*m\n\x0f\x41utoScaleAction\x12-\n\x08SCALEOUT\x10\x00\x1a\x1f\x92\x97\"\x1bServer AutoScale out Action\x12+\n\x07SCALEIN\x10\x01\x1a\x1e\x92\x97\"\x1aServer AutoScale in Action*\x1d\n\tCONSTANTS\x12\x10\n\x0b\x44\x45\x46\x41ULT_MTU\x10\xdc\x0b**\n\x0f\x43loudDeprecated\x12\x17\n\x10\x43LOUD_CLOUDSTACK\x10\xff\xac\xe2\x04*\x96\x01\n\x0b\x41picContext\x12\x43\n\x0eSINGLE_CONTEXT\x10o\x1a/\x92\x97\"+Single Context Aware for Avi Device in APIC\x12\x42\n\rMULTI_CONTEXT\x10\xde\x01\x1a.\x92\x97\"*Multi Context Aware for Avi Device in APIC*F\n\x12\x41\x63tiveStandbySeTag\x12\x17\n\x13\x41\x43TIVE_STANDBY_SE_1\x10\x01\x12\x17\n\x13\x41\x43TIVE_STANDBY_SE_2\x10\x02*A\n\x08Protocol\x12\x11\n\rPROTOCOL_ICMP\x10\x01\x12\x10\n\x0cPROTOCOL_TCP\x10\x06\x12\x10\n\x0cPROTOCOL_UDP\x10\x11*a\n\rContainerType\x12\x19\n\x15\x43ONTAINER_TYPE_BRIDGE\x10\x01\x12\x17\n\x13\x43ONTAINER_TYPE_HOST\x10\x02\x12\x1c\n\x18\x43ONTAINER_TYPE_HOST_DPDK\x10\x03\x42\x1d\n\x18\x63om.avinetworks.protobuf\x88\x01\x01')
  ,
  dependencies=[options__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_AVIOBJECTTYPE = _descriptor.EnumDescriptor(
  name='AviObjectType',
  full_name='AviObjectType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='VIRTUALSERVICE', index=0, number=1001,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='POOL', index=1, number=1002,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HEALTHMONITOR', index=2, number=1003,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NETWORKPROFILE', index=3, number=1004,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APPLICATIONPROFILE', index=4, number=1005,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTPPOLICYSET', index=5, number=1006,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DNSPOLICY', index=6, number=1007,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPADDRGROUP', index=7, number=1009,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='STRINGGROUP', index=8, number=1010,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SSLPROFILE', index=9, number=1011,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SSLKEYANDCERTIFICATE', index=10, number=1012,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NETWORKSECURITYPOLICY', index=11, number=1013,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APPLICATIONPERSISTENCEPROFILE', index=12, number=1014,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ANALYTICSPROFILE', index=13, number=1015,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VSDATASCRIPTSET', index=14, number=1016,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TENANT', index=15, number=1017,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PKIPROFILE', index=16, number=1018,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='AUTHPROFILE', index=17, number=1019,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD', index=18, number=1020,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERVERAUTOSCALEPOLICY', index=19, number=1021,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='AUTOSCALELAUNCHCONFIG', index=20, number=1022,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MICROSERVICEGROUP', index=21, number=1023,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPAMPROFILE', index=22, number=1024,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HARDWARESECURITYMODULEGROUP', index=23, number=1025,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='POOLGROUP', index=24, number=1026,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PRIORITYLABELS', index=25, number=1027,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='POOLGROUPDEPLOYMENTPOLICY', index=26, number=1028,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBSERVICE', index=27, number=1029,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBSERVICERUNTIME', index=28, number=1031,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SCHEDULER', index=29, number=1032,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBGEODBPROFILE', index=30, number=1033,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBAPPLICATIONPERSISTENCEPROFILE', index=31, number=1034,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRAFFICCLONEPROFILE', index=32, number=1035,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VSVIP', index=33, number=1036,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WAFPOLICY', index=34, number=1037,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WAFPROFILE', index=35, number=1038,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ERRORPAGEPROFILE', index=36, number=1039,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ERRORPAGEBODY', index=37, number=1040,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='L4POLICYSET', index=38, number=1041,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERVICEENGINE', index=39, number=1500,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DEBUGSERVICEENGINE', index=40, number=1501,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DEBUGCONTROLLER', index=41, number=1502,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DEBUGVIRTUALSERVICE', index=42, number=1503,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERVICEENGINEGROUP', index=43, number=1504,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEPROPERTIES', index=44, number=1505,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NETWORK', index=45, number=1506,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONTROLLERNODE', index=46, number=1507,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONTROLLERPROPERTIES', index=47, number=1508,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SYSTEMCONFIGURATION', index=48, number=1509,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VRFCONTEXT', index=49, number=1510,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='USER', index=50, number=1511,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALERTCONFIG', index=51, number=1512,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALERTSYSLOGCONFIG', index=52, number=1513,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALERTEMAILCONFIG', index=53, number=1514,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALERTTYPECONFIG', index=54, number=1515,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APPLICATION', index=55, number=1516,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROLE', index=56, number=1517,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUDPROPERTIES', index=57, number=1518,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SNMPTRAPPROFILE', index=58, number=1519,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACTIONGROUPPROFILE', index=59, number=1520,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MICROSERVICE', index=60, number=1521,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALERTPARAMS', index=61, number=1522,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACTIONGROUPCONFIG', index=62, number=1523,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUDCONNECTORUSER', index=63, number=1524,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLB', index=64, number=1525,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBDNSUPDATE', index=65, number=1526,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBSITEOPS', index=66, number=1527,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GLBMGRWARMSTART', index=67, number=1528,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPAMDNSRECORD', index=68, number=1531,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBDNSGSSTATUS', index=69, number=1532,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBDNSGEOFILEOPS', index=70, number=1533,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBDNSGEOUPDATE', index=71, number=1534,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBDNSGEOCLUSTEROPS', index=72, number=1535,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBDNSCLEANUP', index=73, number=1536,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBSITEOPSRESYNC', index=74, number=1537,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCPSTATRUNTIME', index=75, number=2001,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UDPSTATRUNTIME', index=76, number=2017,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPSTATRUNTIME', index=77, number=2018,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ARPSTATRUNTIME', index=78, number=2019,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MBSTATRUNTIME', index=79, number=2020,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPSTKQSTATSRUNTIME', index=80, number=2021,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MALLOCSTATRUNTIME', index=81, number=2022,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SHMALLOCSTATRUNTIME', index=82, number=2023,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CPUUSAGERUNTIME', index=83, number=2024,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='L7GLOBALSTATSRUNTIME', index=84, number=2025,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='L7VIRTUALSERVICESTATSRUNTIME', index=85, number=2026,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEAGENTVNICDBRUNTIME', index=86, number=2027,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEAGENTGRAPHDBRUNTIME', index=87, number=2028,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEAGENTSTATERUNTIME', index=88, number=2029,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERFACERUNTIME', index=89, number=2030,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ARPTABLERUNTIME', index=90, number=2031,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DISPATCHERSTATRUNTIME', index=91, number=2032,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DISPATCHERSTATCLEARRUNTIME', index=92, number=2033,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DISPATCHERTABLEDUMPRUNTIME', index=93, number=2034,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DISPATCHERREMOTETIMERLISTDUMPRUNTIME', index=94, number=2035,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='METRICSAGENTMESSAGE', index=95, number=2036,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HEALTHMONITORSTATRUNTIME', index=96, number=2037,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='METRICSENTITYRUNTIME', index=97, number=2038,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PERSISTENCEINTERNAL', index=98, number=2039,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTPPOLICYSETINTERNAL', index=99, number=2040,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DNSPOLICYINTERNAL', index=100, number=2041,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONNECTIONDUMPRUNTIME', index=101, number=2043,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SHAREDDBSTATS', index=102, number=2044,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SHAREDDBSTATSCLEAR', index=103, number=2045,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMPSTATRUNTIME', index=104, number=2046,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROUTETABLERUNTIME', index=105, number=2047,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIRTUALMACHINE', index=106, number=2048,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='POOLSERVER', index=107, number=2049,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEVSLIST', index=108, number=2050,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MEMINFORUNTIME', index=109, number=2051,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RTERINGSTATRUNTIME', index=110, number=2052,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALGOSTATRUNTIME', index=111, number=2053,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HEALTHMONITORRUNTIME', index=112, number=2054,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CPUSTATRUNTIME', index=113, number=2055,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEVM', index=114, number=2056,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HOST', index=115, number=2057,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PORTGROUP', index=116, number=2058,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLUSTER', index=117, number=2059,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DATACENTER', index=118, number=2060,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VCENTER', index=119, number=2061,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTPPOLICYSETSTATS', index=120, number=2062,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DNSPOLICYSTATS', index=121, number=2063,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='METRICSSESTATS', index=122, number=2065,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RATELIMITERSTATRUNTIME', index=123, number=2066,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NETWORKSECURITYPOLICYSTATS', index=124, number=2067,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCPCONNRUNTIME', index=125, number=2068,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='POOLSTATS', index=126, number=2069,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONNPOOLINTERNAL', index=127, number=2070,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONNPOOLSTATS', index=128, number=2071,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VSHASHSHOWRUNTIME', index=129, number=2072,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SELOGSTATSRUNTIME', index=130, number=2073,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NETWORKSECURITYPOLICYDETAIL', index=131, number=2074,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LICENSERUNTIME', index=132, number=2075,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERVERRUNTIME', index=133, number=2076,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='METRICSRUNTIMESUMMARY', index=134, number=2077,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='METRICSRUNTIMEDETAIL', index=135, number=2078,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DISPATCHERSEHMPROBETEMPDISABLERUNTIME', index=136, number=2079,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='POOLDEBUG', index=137, number=2080,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VSLOGMGRMAP', index=138, number=2081,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERUMINSERTIONSTATS', index=139, number=2082,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTPCACHE', index=140, number=2083,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTPCACHESTATS', index=141, number=2084,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEDOSSTATRUNTIME', index=142, number=2085,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VSDOSSTATRUNTIME', index=143, number=2086,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERVERUPDATEREQ', index=144, number=2087,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VSSCALEOUTLIST', index=145, number=2088,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEMEMDISTRUNTIME', index=146, number=2089,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCPCONNRUNTIMEDETAIL', index=147, number=2090,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEUPGRADESTATUS', index=148, number=2091,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEUPGRADEPREVIEW', index=149, number=2092,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEFAULTINJECTEXHAUSTM', index=150, number=2093,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEFAULTINJECTEXHAUSTMCL', index=151, number=2094,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEFAULTINJECTEXHAUSTMCLSMALL', index=152, number=2095,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEFAULTINJECTEXHAUSTCONN', index=153, number=2096,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEHEADLESSONLINEREQ', index=154, number=2097,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEUPGRADE', index=155, number=2098,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEUPGRADESTATUSDETAIL', index=156, number=2099,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERESERVEDVS', index=157, number=2100,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERESERVEDVSCLEAR', index=158, number=2101,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VSCANDIDATESEHOSTLIST', index=159, number=2102,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEGROUPUPGRADE', index=160, number=2103,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REBALANCE', index=161, number=2104,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEGROUPREBALANCE', index=162, number=2105,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEAUTHSTATSRUNTIME', index=163, number=2106,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='AUTOSCALESTATE', index=164, number=2107,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIRTUALSERVICEAUTHSTATS', index=165, number=2108,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NETWORKSECURITYPOLICYDOS', index=166, number=2109,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='KEYVALINTERNAL', index=167, number=2110,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='KEYVALSUMMARYINTERNAL', index=168, number=2111,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERVERSTATEUPDATEINFO', index=169, number=2112,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLTRACKINTERNAL', index=170, number=2113,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLTRACKSUMMARYINTERNAL', index=171, number=2114,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MICROSERVICERUNTIME', index=172, number=2115,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEMICROSERVICE', index=173, number=2116,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIRTUALSERVICEANALYSIS', index=174, number=2117,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLIENTINTERNAL', index=175, number=2118,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLIENTSUMMARYINTERNAL', index=176, number=2119,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MICROSERVICEGROUPRUNTIME', index=177, number=2120,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BGPRUNTIME', index=178, number=2121,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REQUESTQUEUERUNTIME', index=179, number=2122,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MIGRATEALL', index=180, number=2123,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MIGRATEALLSTATUSSUMMARY', index=181, number=2124,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MIGRATEALLSTATUSDETAIL', index=182, number=2125,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERFACESUMMARYRUNTIME', index=183, number=2126,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERFACELACPRUNTIME', index=184, number=2127,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DNSTABLE', index=185, number=2128,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBSERVICEDETAIL', index=186, number=2129,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBSERVICEINTERNAL', index=187, number=2130,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBSERVICEHMONSTAT', index=188, number=2131,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SETROLESREQUEST', index=189, number=2132,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRAFFICCLONERUNTIME', index=190, number=2133,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GEOLOCATIONINFO', index=191, number=2134,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEVSHBSTATRUNTIME', index=192, number=2135,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GEODBINTERNAL', index=193, number=2136,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GSLBSITEINTERNAL', index=194, number=2137,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WAFSTATS', index=195, number=2138,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='USERDEFINEDDATASCRIPTCOUNTERS', index=196, number=2139,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LLDPRUNTIME', index=197, number=2140,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VSESSHARINGPOOL', index=198, number=2141,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEVSSPLACEMENT', index=199, number=2145,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='L4POLICYSETSTATS', index=200, number=2146,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='L4POLICYSETINTERNAL', index=201, number=2147,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERESOURCEPROTO', index=202, number=3001,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SECONSUMERPROTO', index=203, number=3002,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SECREATEPENDINGPROTO', index=204, number=3003,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PLACEMENTSTATS', index=205, number=3004,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEVIPPROTO', index=206, number=3005,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RMVRFPROTO', index=207, number=3006,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VCENTERMAP', index=208, number=3007,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIMGRVCENTERRUNTIME', index=209, number=3008,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERESTEDVMS', index=210, number=3009,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERESTEDHOSTS', index=211, number=3010,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VCENTERSUPPORTEDCOUNTERS', index=212, number=3011,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ENTITYCOUNTERS', index=213, number=3012,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRANSACTIONSTATS', index=214, number=3013,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEVMCREATEPROGRESS', index=215, number=3014,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PLACEMENTSTATUS', index=216, number=3015,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VISUBFOLDERS', index=217, number=3016,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIDATASTORE', index=218, number=3017,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIHOSTRESOURCES', index=219, number=3018,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUDCONNECTOR', index=220, number=3020,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VINETWORKSUBNETVMS', index=221, number=3021,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIDATASTORECONTENTS', index=222, number=3022,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIMGRVCENTERCLOUDRUNTIME', index=223, number=3023,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIVCENTERPORTGROUPS', index=224, number=3024,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIVCENTERDATACENTERS', index=225, number=3025,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIMGRHOSTRUNTIME', index=226, number=3026,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PLACEMENTGLOBALS', index=227, number=3027,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICCONFIGURATION', index=228, number=3050,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CIFTABLE', index=229, number=3051,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICTRANSACTION', index=230, number=3502,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIRTUALSERVICESTATEDBCACHESUMMARY', index=231, number=3503,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='POOLSTATEDBCACHESUMMARY', index=232, number=3504,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERVERSTATEDBCACHESUMMARY', index=233, number=3505,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICAGENTINTERNAL', index=234, number=3506,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICTRANSACTIONFLAP', index=235, number=3507,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICGRAPHINSTANCES', index=236, number=3508,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICEPGS', index=237, number=3509,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICEPGEPS', index=238, number=3510,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICDEVICEPKGVER', index=239, number=3511,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICTENANTS', index=240, number=3512,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APICVMMDOMAINS', index=241, number=3513,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NSXCONFIGURATION', index=242, number=3525,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NSXSGTABLE', index=243, number=3526,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NSXAGENTINTERNAL', index=244, number=3527,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NSXSGINFO', index=245, number=3528,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NSXSGIPS', index=246, number=3529,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NSXAGENTINTERNALCLI', index=247, number=3530,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MAXOBJECTS', index=248, number=4000,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4209,
  serialized_end=9932,
)
_sym_db.RegisterEnumDescriptor(_AVIOBJECTTYPE)

AviObjectType = enum_type_wrapper.EnumTypeWrapper(_AVIOBJECTTYPE)
_CONNECTIONTYPE = _descriptor.EnumDescriptor(
  name='ConnectionType',
  full_name='ConnectionType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='BOTH', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FRONTEND', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BACKEND', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=9934,
  serialized_end=9987,
)
_sym_db.RegisterEnumDescriptor(_CONNECTIONTYPE)

ConnectionType = enum_type_wrapper.EnumTypeWrapper(_CONNECTIONTYPE)
_HYPERVISOR = _descriptor.EnumDescriptor(
  name='Hypervisor',
  full_name='Hypervisor',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DEFAULT', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VMWARE_ESX', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\nVMWARE_ESX\222\227\"\025VMware ESX Hypervisor')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='KVM', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\003KVM\222\227\"\016KVM Hypervisor')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VMWARE_VSAN', index=3, number=3,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013VMWARE_VSAN\222\227\"\037VMware ESX Hypervisor with VSAN')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='XEN', index=4, number=4,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\003Xen\222\227\"\016Xen Hypervisor')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=9990,
  serialized_end=10213,
)
_sym_db.RegisterEnumDescriptor(_HYPERVISOR)

Hypervisor = enum_type_wrapper.EnumTypeWrapper(_HYPERVISOR)
_IMAGEFORMAT = _descriptor.EnumDescriptor(
  name='ImageFormat',
  full_name='ImageFormat',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='IMG_FMT_OVA', index=0, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMG_FMT_QCOW2', index=1, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMG_FMT_VMDK', index=2, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMG_FMT_RAW', index=3, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMG_FMT_FLAT', index=4, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMG_FMT_AMI', index=5, number=6,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=10215,
  serialized_end=10334,
)
_sym_db.RegisterEnumDescriptor(_IMAGEFORMAT)

ImageFormat = enum_type_wrapper.EnumTypeWrapper(_IMAGEFORMAT)
_TAGTYPE = _descriptor.EnumDescriptor(
  name='TagType',
  full_name='TagType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='AVI_DEFINED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='USER_DEFINED', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VCENTER_DEFINED', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=10336,
  serialized_end=10401,
)
_sym_db.RegisterEnumDescriptor(_TAGTYPE)

TagType = enum_type_wrapper.EnumTypeWrapper(_TAGTYPE)
_IPADDRMODE = _descriptor.EnumDescriptor(
  name='IpAddrMode',
  full_name='IpAddrMode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DHCP', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='STATIC', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIP', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DOCKER_HOST', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=10403,
  serialized_end=10463,
)
_sym_db.RegisterEnumDescriptor(_IPADDRMODE)

IpAddrMode = enum_type_wrapper.EnumTypeWrapper(_IPADDRMODE)
_PROTOCOLTYPE = _descriptor.EnumDescriptor(
  name='ProtocolType',
  full_name='ProtocolType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='PROTOCOL_TYPE_TCP_PROXY', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tTCP Proxy\272\227\"\003tcp')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PROTOCOL_TYPE_TCP_FAST_PATH', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\rTCP Fast Path\272\227\"\003tcp')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PROTOCOL_TYPE_UDP_FAST_PATH', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\rUDP Fast Path\272\227\"\003udp')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=10466,
  serialized_end=10649,
)
_sym_db.RegisterEnumDescriptor(_PROTOCOLTYPE)

ProtocolType = enum_type_wrapper.EnumTypeWrapper(_PROTOCOLTYPE)
_HTTPPROTOCOL = _descriptor.EnumDescriptor(
  name='HTTPProtocol',
  full_name='HTTPProtocol',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='HTTP', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\rHTTP Protocol')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTPS', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\024Secure HTTP Protocol')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=10651,
  serialized_end=10731,
)
_sym_db.RegisterEnumDescriptor(_HTTPPROTOCOL)

HTTPProtocol = enum_type_wrapper.EnumTypeWrapper(_HTTPPROTOCOL)
_HTTPMETHOD = _descriptor.EnumDescriptor(
  name='HTTPMethod',
  full_name='HTTPMethod',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='HTTP_METHOD_GET', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\003GET\222\227\"\017HTTP get method')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_METHOD_HEAD', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\004HEAD\222\227\"\020HTTP head method')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_METHOD_PUT', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\003PUT\222\227\"\017HTTP put method')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_METHOD_DELETE', index=3, number=3,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006DELETE\222\227\"\022HTTP delete method')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_METHOD_POST', index=4, number=4,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\004POST\222\227\"\020HTTP post method')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_METHOD_OPTIONS', index=5, number=5,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\007OPTIONS\222\227\"\023HTTP options method')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=10734,
  serialized_end=11067,
)
_sym_db.RegisterEnumDescriptor(_HTTPMETHOD)

HTTPMethod = enum_type_wrapper.EnumTypeWrapper(_HTTPMETHOD)
_HTTPVERSION = _descriptor.EnumDescriptor(
  name='HTTPVersion',
  full_name='HTTPVersion',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ZERO_NINE', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\0030.9\222\227\"\031HTTP protocol version 0.9')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ONE_ZERO', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\0031.0\222\227\"\031HTTP protocol version 1.0')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ONE_ONE', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\0031.1\222\227\"\031HTTP protocol version 1.1')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=11070,
  serialized_end=11239,
)
_sym_db.RegisterEnumDescriptor(_HTTPVERSION)

HTTPVersion = enum_type_wrapper.EnumTypeWrapper(_HTTPVERSION)
_HTTPREDIRECTSTATUSCODE = _descriptor.EnumDescriptor(
  name='HTTPRedirectStatusCode',
  full_name='HTTPRedirectStatusCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='HTTP_REDIRECT_STATUS_CODE_301', index=0, number=301,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\025301 Moved Permanently')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_REDIRECT_STATUS_CODE_302', index=1, number=302,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\t302 Found')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_REDIRECT_STATUS_CODE_307', index=2, number=307,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\")307 Moved Temporarily (only for HTTP/1.1)')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=11242,
  serialized_end=11463,
)
_sym_db.RegisterEnumDescriptor(_HTTPREDIRECTSTATUSCODE)

HTTPRedirectStatusCode = enum_type_wrapper.EnumTypeWrapper(_HTTPREDIRECTSTATUSCODE)
_HTTPLOCALRESPONSESTATUSCODE = _descriptor.EnumDescriptor(
  name='HTTPLocalResponseStatusCode',
  full_name='HTTPLocalResponseStatusCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='HTTP_LOCAL_RESPONSE_STATUS_CODE_200', index=0, number=200,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\006200 OK')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_LOCAL_RESPONSE_STATUS_CODE_403', index=1, number=403,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\r403 Forbidden')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_LOCAL_RESPONSE_STATUS_CODE_404', index=2, number=404,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\r404 Not Found')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_LOCAL_RESPONSE_STATUS_CODE_429', index=3, number=429,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\" 429 Too Many Requests (RFC 6585)')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=11466,
  serialized_end=11751,
)
_sym_db.RegisterEnumDescriptor(_HTTPLOCALRESPONSESTATUSCODE)

HTTPLocalResponseStatusCode = enum_type_wrapper.EnumTypeWrapper(_HTTPLOCALRESPONSESTATUSCODE)
_MATCHCASE = _descriptor.EnumDescriptor(
  name='MatchCase',
  full_name='MatchCase',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SENSITIVE', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tSensitive\222\227\"\024case sensitive match')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INSENSITIVE', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Insensitive\222\227\"\026case insensitive match')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=11753,
  serialized_end=11878,
)
_sym_db.RegisterEnumDescriptor(_MATCHCASE)

MatchCase = enum_type_wrapper.EnumTypeWrapper(_MATCHCASE)
_MATCHOPERATION = _descriptor.EnumDescriptor(
  name='MatchOperation',
  full_name='MatchOperation',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='IS_IN', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\005Is in\222\227\"\035is in the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IS_NOT_IN', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tIs not in\222\227\"!is not in the configured value(s)')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=11881,
  serialized_end=12019,
)
_sym_db.RegisterEnumDescriptor(_MATCHOPERATION)

MatchOperation = enum_type_wrapper.EnumTypeWrapper(_MATCHOPERATION)
_HDRMATCHOPERATION = _descriptor.EnumDescriptor(
  name='HdrMatchOperation',
  full_name='HdrMatchOperation',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='HDR_EXISTS', index=0, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006Exists\222\227\"!header exists in the HTTP request')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HDR_DOES_NOT_EXIST', index=1, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\016Does not exist\222\227\")header does not exist in the HTTP request')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HDR_BEGINS_WITH', index=2, number=3,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Begins with\222\227\"/header value begins with the configure value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HDR_DOES_NOT_BEGIN_WITH', index=3, number=4,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\023Does not begin with\222\227\"8header value does not begins with the configure value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HDR_CONTAINS', index=4, number=5,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Contains\222\227\")header value contains configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HDR_DOES_NOT_CONTAIN', index=5, number=6,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\020Does not contain\222\227\"3header value  does not contains configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HDR_ENDS_WITH', index=6, number=7,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tEnds with\222\227\".header value ends with the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HDR_DOES_NOT_END_WITH', index=7, number=8,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\021Does not end with\222\227\"7header value does not ends with the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HDR_EQUALS', index=8, number=9,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006Equals\222\227\"+header value equals the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HDR_DOES_NOT_EQUAL', index=9, number=10,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\016Does not equal\222\227\"4header value does not equals the configured value(s)')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=12022,
  serialized_end=12946,
)
_sym_db.RegisterEnumDescriptor(_HDRMATCHOPERATION)

HdrMatchOperation = enum_type_wrapper.EnumTypeWrapper(_HDRMATCHOPERATION)
_STRINGOPERATION = _descriptor.EnumDescriptor(
  name='StringOperation',
  full_name='StringOperation',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='BEGINS_WITH', index=0, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Begins with\222\227\"#begins with the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DOES_NOT_BEGIN_WITH', index=1, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\023Does not begin with\222\227\"+does not begin with the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONTAINS', index=2, number=3,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Contains\222\227\" contains the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DOES_NOT_CONTAIN', index=3, number=4,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\020Does not contain\222\227\"(does not contain the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ENDS_WITH', index=4, number=5,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tEnds with\222\227\"!ends with the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DOES_NOT_END_WITH', index=5, number=6,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\021Does not end with\222\227\")does not end with the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='EQUALS', index=6, number=7,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006Equals\222\227\"\036equals the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DOES_NOT_EQUAL', index=7, number=8,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\016Does not equal\222\227\"&does not equal the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REGEX_MATCH', index=8, number=9,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\025Regex pattern matches\222\227\"2regex pattern matches with the configured value(s)')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REGEX_DOES_NOT_MATCH', index=9, number=10,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\034Regex pattern does not match\222\227\"9regex pattern does not match with the configured value(s)')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=12949,
  serialized_end=13805,
)
_sym_db.RegisterEnumDescriptor(_STRINGOPERATION)

StringOperation = enum_type_wrapper.EnumTypeWrapper(_STRINGOPERATION)
_QUERYMATCHOPERATION = _descriptor.EnumDescriptor(
  name='QueryMatchOperation',
  full_name='QueryMatchOperation',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='QUERY_MATCH_CONTAINS', index=0, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Contains\222\227\" contains the configured value(s)')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=13807,
  serialized_end=13904,
)
_sym_db.RegisterEnumDescriptor(_QUERYMATCHOPERATION)

QueryMatchOperation = enum_type_wrapper.EnumTypeWrapper(_QUERYMATCHOPERATION)
_ADMINSTATE = _descriptor.EnumDescriptor(
  name='AdminState',
  full_name='AdminState',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ENABLED', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\007Enabled')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DISABLED', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Disabled')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=13906,
  serialized_end=13972,
)
_sym_db.RegisterEnumDescriptor(_ADMINSTATE)

AdminState = enum_type_wrapper.EnumTypeWrapper(_ADMINSTATE)
_OPERATIONALSTATE = _descriptor.EnumDescriptor(
  name='OperationalState',
  full_name='OperationalState',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='OPER_UP', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_DOWN', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\022Operationally down')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_CREATING', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\" Controller is Creating resources')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_RESOURCES', index=3, number=3,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"7Controller is waiting for resources to become available')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_INACTIVE', index=4, number=4,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\",Controller is not attempting to place object')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_DISABLED', index=5, number=5,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\022Object is Disabled')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_UNUSED', index=6, number=6,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"(Object not attached to a Virtual Service')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_UNKNOWN', index=7, number=7,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\rUnknown state')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_PROCESSING', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_INITIALIZING', index=9, number=9,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_ERROR_DISABLED', index=10, number=10,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_AWAIT_MANUAL_PLACEMENT', index=11, number=11,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_UPGRADING', index=12, number=12,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\023Upgrade in progress')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_SE_PROCESSING', index=13, number=13,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"$Service Engine is processing request')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_PARTITIONED', index=14, number=14,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\033Unreachable from Controller')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_DISABLING', index=15, number=15,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"9Service Engine awaiting Migration of all Virtual Services')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_FAILED', index=16, number=16,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\031Currently in failed state')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_UNAVAIL', index=17, number=25,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\034Object status is unavailable')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=13975,
  serialized_end=14846,
)
_sym_db.RegisterEnumDescriptor(_OPERATIONALSTATE)

OperationalState = enum_type_wrapper.EnumTypeWrapper(_OPERATIONALSTATE)
_CONFIGURATIONSTATE = _descriptor.EnumDescriptor(
  name='ConfigurationState',
  full_name='ConfigurationState',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CONFIG_UP', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_DOWN', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_CREATING', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_RESOURCES', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_INACTIVE', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_DISABLED', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_UNUSED', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_UNKNOWN', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_PROCESSING', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_INITIALIZING', index=9, number=9,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_ERROR_DISABLED', index=10, number=10,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_AWAIT_MANUAL_PLACEMENT', index=11, number=11,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_UPGRADING', index=12, number=12,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_SE_PROCESSING', index=13, number=13,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONFIG_PARTITIONED', index=14, number=14,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=14849,
  serialized_end=15207,
)
_sym_db.RegisterEnumDescriptor(_CONFIGURATIONSTATE)

ConfigurationState = enum_type_wrapper.EnumTypeWrapper(_CONFIGURATIONSTATE)
_PRIVILEGE = _descriptor.EnumDescriptor(
  name='Privilege',
  full_name='Privilege',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NO_ACCESS', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tNo Access')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='READ_ACCESS', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Read Access')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WRITE_ACCESS', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\014Write Access')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=15209,
  serialized_end=15320,
)
_sym_db.RegisterEnumDescriptor(_PRIVILEGE)

Privilege = enum_type_wrapper.EnumTypeWrapper(_PRIVILEGE)
_RESOURCECATEGORY = _descriptor.EnumDescriptor(
  name='ResourceCategory',
  full_name='ResourceCategory',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='RESOURCE_CATEGORY_APPLICATION', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Application')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RESOURCE_CATEGORY_ACCOUNT', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\007Account')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RESOURCE_CATEGORY_PROFILES', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Profiles')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RESOURCE_CATEGORY_INFRASTRUCTURE', index=3, number=3,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\016Infrastructure')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RESOURCE_CATEGORY_SYSTEM', index=4, number=4,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006System')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RESOURCE_CATEGORY_SECURITY', index=5, number=5,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Security')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=15323,
  serialized_end=15629,
)
_sym_db.RegisterEnumDescriptor(_RESOURCECATEGORY)

ResourceCategory = enum_type_wrapper.EnumTypeWrapper(_RESOURCECATEGORY)
_POOLACTION = _descriptor.EnumDescriptor(
  name='PoolAction',
  full_name='PoolAction',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='POOL_ACTION_UPDATED', index=0, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='POOL_ACTION_DELETED', index=1, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=15631,
  serialized_end=15693,
)
_sym_db.RegisterEnumDescriptor(_POOLACTION)

PoolAction = enum_type_wrapper.EnumTypeWrapper(_POOLACTION)
_HTTPPOLICYVAR = _descriptor.EnumDescriptor(
  name='HTTPPolicyVar',
  full_name='HTTPPolicyVar',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_CLIENT_IP', index=0, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"0Variable to get client IP address of the request')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_VS_PORT', index=1, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"8Variable to get virtual service port the request came on')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_VS_IP', index=2, number=3,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"FVariable to get IP address of the virtual service the request came for')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_HTTP_HDR', index=3, number=4,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"<Variable to get value of the HTTP header in the HTTP request')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_SSL_CLIENT_FINGERPRINT', index=4, number=5,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\"SSL Client Certificate fingerprint')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_SSL_CLIENT_SERIAL', index=5, number=6,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"$SSL Client Certificate serial number')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_SSL_CLIENT_ISSUER', index=6, number=7,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\"SSL Client Certificate Issuer name')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_SSL_CLIENT_SUBJECT', index=7, number=8,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"#SSL Client Certificate Subject name')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_SSL_CLIENT_RAW', index=8, number=9,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"0The whole SSL client certificate in a PEM format')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_SSL_PROTOCOL', index=9, number=10,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"+SSL protocol negotiated for this connection')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_SSL_SERVER_NAME', index=10, number=11,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"!Server name requested through SNI')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_USER_NAME', index=11, number=12,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"4Username obtained from http request using basic auth')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HTTP_POLICY_VAR_SSL_CIPHER', index=12, number=13,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"SCipher suite used for the SSL/TLS connection between the client and virtual service')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=15696,
  serialized_end=16870,
)
_sym_db.RegisterEnumDescriptor(_HTTPPOLICYVAR)

HTTPPolicyVar = enum_type_wrapper.EnumTypeWrapper(_HTTPPOLICYVAR)
_CLOUDTYPE = _descriptor.EnumDescriptor(
  name='CloudType',
  full_name='CloudType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CLOUD_NONE', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\004None\252\231\"\006\010\003\010\002\010\005\212\227\"\004None')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_VCENTER', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\032VMware vCenter/vSphere ESX\252\231\"\004\010\003\010\005\212\227\"\032VMware vCenter/vSphere ESX')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_OPENSTACK', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\tOpenStack\252\231\"\004\010\003\010\005\212\227\"\tOpenStack')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_AWS', index=3, number=3,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\023Amazon Web Services\252\231\"\004\010\003\010\005\212\227\"\003AWS')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_VCA', index=4, number=5,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\021VMware vCloud Air\252\231\"\004\010\003\010\005\212\227\"\nvCloud Air')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_APIC', index=5, number=6,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\004Apic\252\231\"\004\010\003\010\005\212\227\"\004Apic')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_MESOS', index=6, number=7,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\005Mesos\252\231\"\006\010\004\010\003\010\005\212\227\"\005Mesos')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_LINUXSERVER', index=7, number=8,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\014Linux Server\252\231\"\006\010\003\010\002\010\005\212\227\"\014Linux Server')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_DOCKER_UCP', index=8, number=9,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\036Docker Universal Control Plane\252\231\"\006\010\004\010\003\010\005\212\227\"\036Docker Universal Control Plane')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_RANCHER', index=9, number=10,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\rRancher Cloud\252\231\"\006\010\004\010\003\010\005\212\227\"\rRancher Cloud')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_OSHIFT_K8S', index=10, number=11,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\032OpenShift/Kubernetes Cloud\252\231\"\006\010\004\010\003\010\005\212\227\"\032OpenShift/Kubernetes Cloud')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLOUD_AZURE', index=11, number=12,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\013Azure Cloud\252\231\"\004\010\003\010\005\212\227\"\013Azure Cloud')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=16873,
  serialized_end=17663,
)
_sym_db.RegisterEnumDescriptor(_CLOUDTYPE)

CloudType = enum_type_wrapper.EnumTypeWrapper(_CLOUDTYPE)
_SEVERNUM = _descriptor.EnumDescriptor(
  name='SeVerNum',
  full_name='SeVerNum',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SE_VER_1', index=0, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"&Ver 1 SE\'s create UUID from dmi_decode')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SE_VER_2', index=1, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"!Ver 2 SE\'s create UUID from vNic0')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=17665,
  serialized_end=17786,
)
_sym_db.RegisterEnumDescriptor(_SEVERNUM)

SeVerNum = enum_type_wrapper.EnumTypeWrapper(_SEVERNUM)
_AUTOSCALEACTION = _descriptor.EnumDescriptor(
  name='AutoScaleAction',
  full_name='AutoScaleAction',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SCALEOUT', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\033Server AutoScale out Action')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SCALEIN', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\032Server AutoScale in Action')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=17788,
  serialized_end=17897,
)
_sym_db.RegisterEnumDescriptor(_AUTOSCALEACTION)

AutoScaleAction = enum_type_wrapper.EnumTypeWrapper(_AUTOSCALEACTION)
_CONSTANTS = _descriptor.EnumDescriptor(
  name='CONSTANTS',
  full_name='CONSTANTS',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DEFAULT_MTU', index=0, number=1500,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=17899,
  serialized_end=17928,
)
_sym_db.RegisterEnumDescriptor(_CONSTANTS)

CONSTANTS = enum_type_wrapper.EnumTypeWrapper(_CONSTANTS)
_CLOUDDEPRECATED = _descriptor.EnumDescriptor(
  name='CloudDeprecated',
  full_name='CloudDeprecated',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CLOUD_CLOUDSTACK', index=0, number=9999999,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=17930,
  serialized_end=17972,
)
_sym_db.RegisterEnumDescriptor(_CLOUDDEPRECATED)

CloudDeprecated = enum_type_wrapper.EnumTypeWrapper(_CLOUDDEPRECATED)
_APICCONTEXT = _descriptor.EnumDescriptor(
  name='ApicContext',
  full_name='ApicContext',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SINGLE_CONTEXT', index=0, number=111,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"+Single Context Aware for Avi Device in APIC')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MULTI_CONTEXT', index=1, number=222,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"*Multi Context Aware for Avi Device in APIC')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=17975,
  serialized_end=18125,
)
_sym_db.RegisterEnumDescriptor(_APICCONTEXT)

ApicContext = enum_type_wrapper.EnumTypeWrapper(_APICCONTEXT)
_ACTIVESTANDBYSETAG = _descriptor.EnumDescriptor(
  name='ActiveStandbySeTag',
  full_name='ActiveStandbySeTag',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACTIVE_STANDBY_SE_1', index=0, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACTIVE_STANDBY_SE_2', index=1, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=18127,
  serialized_end=18197,
)
_sym_db.RegisterEnumDescriptor(_ACTIVESTANDBYSETAG)

ActiveStandbySeTag = enum_type_wrapper.EnumTypeWrapper(_ACTIVESTANDBYSETAG)
_PROTOCOL = _descriptor.EnumDescriptor(
  name='Protocol',
  full_name='Protocol',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='PROTOCOL_ICMP', index=0, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PROTOCOL_TCP', index=1, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PROTOCOL_UDP', index=2, number=17,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=18199,
  serialized_end=18264,
)
_sym_db.RegisterEnumDescriptor(_PROTOCOL)

Protocol = enum_type_wrapper.EnumTypeWrapper(_PROTOCOL)
_CONTAINERTYPE = _descriptor.EnumDescriptor(
  name='ContainerType',
  full_name='ContainerType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CONTAINER_TYPE_BRIDGE', index=0, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONTAINER_TYPE_HOST', index=1, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONTAINER_TYPE_HOST_DPDK', index=2, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=18266,
  serialized_end=18363,
)
_sym_db.RegisterEnumDescriptor(_CONTAINERTYPE)

ContainerType = enum_type_wrapper.EnumTypeWrapper(_CONTAINERTYPE)
VIRTUALSERVICE = 1001
POOL = 1002
HEALTHMONITOR = 1003
NETWORKPROFILE = 1004
APPLICATIONPROFILE = 1005
HTTPPOLICYSET = 1006
DNSPOLICY = 1007
IPADDRGROUP = 1009
STRINGGROUP = 1010
SSLPROFILE = 1011
SSLKEYANDCERTIFICATE = 1012
NETWORKSECURITYPOLICY = 1013
APPLICATIONPERSISTENCEPROFILE = 1014
ANALYTICSPROFILE = 1015
VSDATASCRIPTSET = 1016
TENANT = 1017
PKIPROFILE = 1018
AUTHPROFILE = 1019
CLOUD = 1020
SERVERAUTOSCALEPOLICY = 1021
AUTOSCALELAUNCHCONFIG = 1022
MICROSERVICEGROUP = 1023
IPAMPROFILE = 1024
HARDWARESECURITYMODULEGROUP = 1025
POOLGROUP = 1026
PRIORITYLABELS = 1027
POOLGROUPDEPLOYMENTPOLICY = 1028
GSLBSERVICE = 1029
GSLBSERVICERUNTIME = 1031
SCHEDULER = 1032
GSLBGEODBPROFILE = 1033
GSLBAPPLICATIONPERSISTENCEPROFILE = 1034
TRAFFICCLONEPROFILE = 1035
VSVIP = 1036
WAFPOLICY = 1037
WAFPROFILE = 1038
ERRORPAGEPROFILE = 1039
ERRORPAGEBODY = 1040
L4POLICYSET = 1041
SERVICEENGINE = 1500
DEBUGSERVICEENGINE = 1501
DEBUGCONTROLLER = 1502
DEBUGVIRTUALSERVICE = 1503
SERVICEENGINEGROUP = 1504
SEPROPERTIES = 1505
NETWORK = 1506
CONTROLLERNODE = 1507
CONTROLLERPROPERTIES = 1508
SYSTEMCONFIGURATION = 1509
VRFCONTEXT = 1510
USER = 1511
ALERTCONFIG = 1512
ALERTSYSLOGCONFIG = 1513
ALERTEMAILCONFIG = 1514
ALERTTYPECONFIG = 1515
APPLICATION = 1516
ROLE = 1517
CLOUDPROPERTIES = 1518
SNMPTRAPPROFILE = 1519
ACTIONGROUPPROFILE = 1520
MICROSERVICE = 1521
ALERTPARAMS = 1522
ACTIONGROUPCONFIG = 1523
CLOUDCONNECTORUSER = 1524
GSLB = 1525
GSLBDNSUPDATE = 1526
GSLBSITEOPS = 1527
GLBMGRWARMSTART = 1528
IPAMDNSRECORD = 1531
GSLBDNSGSSTATUS = 1532
GSLBDNSGEOFILEOPS = 1533
GSLBDNSGEOUPDATE = 1534
GSLBDNSGEOCLUSTEROPS = 1535
GSLBDNSCLEANUP = 1536
GSLBSITEOPSRESYNC = 1537
TCPSTATRUNTIME = 2001
UDPSTATRUNTIME = 2017
IPSTATRUNTIME = 2018
ARPSTATRUNTIME = 2019
MBSTATRUNTIME = 2020
IPSTKQSTATSRUNTIME = 2021
MALLOCSTATRUNTIME = 2022
SHMALLOCSTATRUNTIME = 2023
CPUUSAGERUNTIME = 2024
L7GLOBALSTATSRUNTIME = 2025
L7VIRTUALSERVICESTATSRUNTIME = 2026
SEAGENTVNICDBRUNTIME = 2027
SEAGENTGRAPHDBRUNTIME = 2028
SEAGENTSTATERUNTIME = 2029
INTERFACERUNTIME = 2030
ARPTABLERUNTIME = 2031
DISPATCHERSTATRUNTIME = 2032
DISPATCHERSTATCLEARRUNTIME = 2033
DISPATCHERTABLEDUMPRUNTIME = 2034
DISPATCHERREMOTETIMERLISTDUMPRUNTIME = 2035
METRICSAGENTMESSAGE = 2036
HEALTHMONITORSTATRUNTIME = 2037
METRICSENTITYRUNTIME = 2038
PERSISTENCEINTERNAL = 2039
HTTPPOLICYSETINTERNAL = 2040
DNSPOLICYINTERNAL = 2041
CONNECTIONDUMPRUNTIME = 2043
SHAREDDBSTATS = 2044
SHAREDDBSTATSCLEAR = 2045
ICMPSTATRUNTIME = 2046
ROUTETABLERUNTIME = 2047
VIRTUALMACHINE = 2048
POOLSERVER = 2049
SEVSLIST = 2050
MEMINFORUNTIME = 2051
RTERINGSTATRUNTIME = 2052
ALGOSTATRUNTIME = 2053
HEALTHMONITORRUNTIME = 2054
CPUSTATRUNTIME = 2055
SEVM = 2056
HOST = 2057
PORTGROUP = 2058
CLUSTER = 2059
DATACENTER = 2060
VCENTER = 2061
HTTPPOLICYSETSTATS = 2062
DNSPOLICYSTATS = 2063
METRICSSESTATS = 2065
RATELIMITERSTATRUNTIME = 2066
NETWORKSECURITYPOLICYSTATS = 2067
TCPCONNRUNTIME = 2068
POOLSTATS = 2069
CONNPOOLINTERNAL = 2070
CONNPOOLSTATS = 2071
VSHASHSHOWRUNTIME = 2072
SELOGSTATSRUNTIME = 2073
NETWORKSECURITYPOLICYDETAIL = 2074
LICENSERUNTIME = 2075
SERVERRUNTIME = 2076
METRICSRUNTIMESUMMARY = 2077
METRICSRUNTIMEDETAIL = 2078
DISPATCHERSEHMPROBETEMPDISABLERUNTIME = 2079
POOLDEBUG = 2080
VSLOGMGRMAP = 2081
SERUMINSERTIONSTATS = 2082
HTTPCACHE = 2083
HTTPCACHESTATS = 2084
SEDOSSTATRUNTIME = 2085
VSDOSSTATRUNTIME = 2086
SERVERUPDATEREQ = 2087
VSSCALEOUTLIST = 2088
SEMEMDISTRUNTIME = 2089
TCPCONNRUNTIMEDETAIL = 2090
SEUPGRADESTATUS = 2091
SEUPGRADEPREVIEW = 2092
SEFAULTINJECTEXHAUSTM = 2093
SEFAULTINJECTEXHAUSTMCL = 2094
SEFAULTINJECTEXHAUSTMCLSMALL = 2095
SEFAULTINJECTEXHAUSTCONN = 2096
SEHEADLESSONLINEREQ = 2097
SEUPGRADE = 2098
SEUPGRADESTATUSDETAIL = 2099
SERESERVEDVS = 2100
SERESERVEDVSCLEAR = 2101
VSCANDIDATESEHOSTLIST = 2102
SEGROUPUPGRADE = 2103
REBALANCE = 2104
SEGROUPREBALANCE = 2105
SEAUTHSTATSRUNTIME = 2106
AUTOSCALESTATE = 2107
VIRTUALSERVICEAUTHSTATS = 2108
NETWORKSECURITYPOLICYDOS = 2109
KEYVALINTERNAL = 2110
KEYVALSUMMARYINTERNAL = 2111
SERVERSTATEUPDATEINFO = 2112
CLTRACKINTERNAL = 2113
CLTRACKSUMMARYINTERNAL = 2114
MICROSERVICERUNTIME = 2115
SEMICROSERVICE = 2116
VIRTUALSERVICEANALYSIS = 2117
CLIENTINTERNAL = 2118
CLIENTSUMMARYINTERNAL = 2119
MICROSERVICEGROUPRUNTIME = 2120
BGPRUNTIME = 2121
REQUESTQUEUERUNTIME = 2122
MIGRATEALL = 2123
MIGRATEALLSTATUSSUMMARY = 2124
MIGRATEALLSTATUSDETAIL = 2125
INTERFACESUMMARYRUNTIME = 2126
INTERFACELACPRUNTIME = 2127
DNSTABLE = 2128
GSLBSERVICEDETAIL = 2129
GSLBSERVICEINTERNAL = 2130
GSLBSERVICEHMONSTAT = 2131
SETROLESREQUEST = 2132
TRAFFICCLONERUNTIME = 2133
GEOLOCATIONINFO = 2134
SEVSHBSTATRUNTIME = 2135
GEODBINTERNAL = 2136
GSLBSITEINTERNAL = 2137
WAFSTATS = 2138
USERDEFINEDDATASCRIPTCOUNTERS = 2139
LLDPRUNTIME = 2140
VSESSHARINGPOOL = 2141
SEVSSPLACEMENT = 2145
L4POLICYSETSTATS = 2146
L4POLICYSETINTERNAL = 2147
SERESOURCEPROTO = 3001
SECONSUMERPROTO = 3002
SECREATEPENDINGPROTO = 3003
PLACEMENTSTATS = 3004
SEVIPPROTO = 3005
RMVRFPROTO = 3006
VCENTERMAP = 3007
VIMGRVCENTERRUNTIME = 3008
INTERESTEDVMS = 3009
INTERESTEDHOSTS = 3010
VCENTERSUPPORTEDCOUNTERS = 3011
ENTITYCOUNTERS = 3012
TRANSACTIONSTATS = 3013
SEVMCREATEPROGRESS = 3014
PLACEMENTSTATUS = 3015
VISUBFOLDERS = 3016
VIDATASTORE = 3017
VIHOSTRESOURCES = 3018
CLOUDCONNECTOR = 3020
VINETWORKSUBNETVMS = 3021
VIDATASTORECONTENTS = 3022
VIMGRVCENTERCLOUDRUNTIME = 3023
VIVCENTERPORTGROUPS = 3024
VIVCENTERDATACENTERS = 3025
VIMGRHOSTRUNTIME = 3026
PLACEMENTGLOBALS = 3027
APICCONFIGURATION = 3050
CIFTABLE = 3051
APICTRANSACTION = 3502
VIRTUALSERVICESTATEDBCACHESUMMARY = 3503
POOLSTATEDBCACHESUMMARY = 3504
SERVERSTATEDBCACHESUMMARY = 3505
APICAGENTINTERNAL = 3506
APICTRANSACTIONFLAP = 3507
APICGRAPHINSTANCES = 3508
APICEPGS = 3509
APICEPGEPS = 3510
APICDEVICEPKGVER = 3511
APICTENANTS = 3512
APICVMMDOMAINS = 3513
NSXCONFIGURATION = 3525
NSXSGTABLE = 3526
NSXAGENTINTERNAL = 3527
NSXSGINFO = 3528
NSXSGIPS = 3529
NSXAGENTINTERNALCLI = 3530
MAXOBJECTS = 4000
BOTH = 0
FRONTEND = 1
BACKEND = 2
DEFAULT = 0
VMWARE_ESX = 1
KVM = 2
VMWARE_VSAN = 3
XEN = 4
IMG_FMT_OVA = 1
IMG_FMT_QCOW2 = 2
IMG_FMT_VMDK = 3
IMG_FMT_RAW = 4
IMG_FMT_FLAT = 5
IMG_FMT_AMI = 6
AVI_DEFINED = 0
USER_DEFINED = 1
VCENTER_DEFINED = 2
DHCP = 0
STATIC = 1
VIP = 2
DOCKER_HOST = 3
PROTOCOL_TYPE_TCP_PROXY = 0
PROTOCOL_TYPE_TCP_FAST_PATH = 1
PROTOCOL_TYPE_UDP_FAST_PATH = 2
HTTP = 0
HTTPS = 1
HTTP_METHOD_GET = 0
HTTP_METHOD_HEAD = 1
HTTP_METHOD_PUT = 2
HTTP_METHOD_DELETE = 3
HTTP_METHOD_POST = 4
HTTP_METHOD_OPTIONS = 5
ZERO_NINE = 0
ONE_ZERO = 1
ONE_ONE = 2
HTTP_REDIRECT_STATUS_CODE_301 = 301
HTTP_REDIRECT_STATUS_CODE_302 = 302
HTTP_REDIRECT_STATUS_CODE_307 = 307
HTTP_LOCAL_RESPONSE_STATUS_CODE_200 = 200
HTTP_LOCAL_RESPONSE_STATUS_CODE_403 = 403
HTTP_LOCAL_RESPONSE_STATUS_CODE_404 = 404
HTTP_LOCAL_RESPONSE_STATUS_CODE_429 = 429
SENSITIVE = 0
INSENSITIVE = 1
IS_IN = 0
IS_NOT_IN = 1
HDR_EXISTS = 1
HDR_DOES_NOT_EXIST = 2
HDR_BEGINS_WITH = 3
HDR_DOES_NOT_BEGIN_WITH = 4
HDR_CONTAINS = 5
HDR_DOES_NOT_CONTAIN = 6
HDR_ENDS_WITH = 7
HDR_DOES_NOT_END_WITH = 8
HDR_EQUALS = 9
HDR_DOES_NOT_EQUAL = 10
BEGINS_WITH = 1
DOES_NOT_BEGIN_WITH = 2
CONTAINS = 3
DOES_NOT_CONTAIN = 4
ENDS_WITH = 5
DOES_NOT_END_WITH = 6
EQUALS = 7
DOES_NOT_EQUAL = 8
REGEX_MATCH = 9
REGEX_DOES_NOT_MATCH = 10
QUERY_MATCH_CONTAINS = 1
ENABLED = 0
DISABLED = 1
OPER_UP = 0
OPER_DOWN = 1
OPER_CREATING = 2
OPER_RESOURCES = 3
OPER_INACTIVE = 4
OPER_DISABLED = 5
OPER_UNUSED = 6
OPER_UNKNOWN = 7
OPER_PROCESSING = 8
OPER_INITIALIZING = 9
OPER_ERROR_DISABLED = 10
OPER_AWAIT_MANUAL_PLACEMENT = 11
OPER_UPGRADING = 12
OPER_SE_PROCESSING = 13
OPER_PARTITIONED = 14
OPER_DISABLING = 15
OPER_FAILED = 16
OPER_UNAVAIL = 25
CONFIG_UP = 0
CONFIG_DOWN = 1
CONFIG_CREATING = 2
CONFIG_RESOURCES = 3
CONFIG_INACTIVE = 4
CONFIG_DISABLED = 5
CONFIG_UNUSED = 6
CONFIG_UNKNOWN = 7
CONFIG_PROCESSING = 8
CONFIG_INITIALIZING = 9
CONFIG_ERROR_DISABLED = 10
CONFIG_AWAIT_MANUAL_PLACEMENT = 11
CONFIG_UPGRADING = 12
CONFIG_SE_PROCESSING = 13
CONFIG_PARTITIONED = 14
NO_ACCESS = 0
READ_ACCESS = 1
WRITE_ACCESS = 2
RESOURCE_CATEGORY_APPLICATION = 0
RESOURCE_CATEGORY_ACCOUNT = 1
RESOURCE_CATEGORY_PROFILES = 2
RESOURCE_CATEGORY_INFRASTRUCTURE = 3
RESOURCE_CATEGORY_SYSTEM = 4
RESOURCE_CATEGORY_SECURITY = 5
POOL_ACTION_UPDATED = 1
POOL_ACTION_DELETED = 2
HTTP_POLICY_VAR_CLIENT_IP = 1
HTTP_POLICY_VAR_VS_PORT = 2
HTTP_POLICY_VAR_VS_IP = 3
HTTP_POLICY_VAR_HTTP_HDR = 4
HTTP_POLICY_VAR_SSL_CLIENT_FINGERPRINT = 5
HTTP_POLICY_VAR_SSL_CLIENT_SERIAL = 6
HTTP_POLICY_VAR_SSL_CLIENT_ISSUER = 7
HTTP_POLICY_VAR_SSL_CLIENT_SUBJECT = 8
HTTP_POLICY_VAR_SSL_CLIENT_RAW = 9
HTTP_POLICY_VAR_SSL_PROTOCOL = 10
HTTP_POLICY_VAR_SSL_SERVER_NAME = 11
HTTP_POLICY_VAR_USER_NAME = 12
HTTP_POLICY_VAR_SSL_CIPHER = 13
CLOUD_NONE = 0
CLOUD_VCENTER = 1
CLOUD_OPENSTACK = 2
CLOUD_AWS = 3
CLOUD_VCA = 5
CLOUD_APIC = 6
CLOUD_MESOS = 7
CLOUD_LINUXSERVER = 8
CLOUD_DOCKER_UCP = 9
CLOUD_RANCHER = 10
CLOUD_OSHIFT_K8S = 11
CLOUD_AZURE = 12
SE_VER_1 = 1
SE_VER_2 = 2
SCALEOUT = 0
SCALEIN = 1
DEFAULT_MTU = 1500
CLOUD_CLOUDSTACK = 9999999
SINGLE_CONTEXT = 111
MULTI_CONTEXT = 222
ACTIVE_STANDBY_SE_1 = 1
ACTIVE_STANDBY_SE_2 = 2
PROTOCOL_ICMP = 1
PROTOCOL_TCP = 6
PROTOCOL_UDP = 17
CONTAINER_TYPE_BRIDGE = 1
CONTAINER_TYPE_HOST = 2
CONTAINER_TYPE_HOST_DPDK = 3



_PORTRANGE = _descriptor.Descriptor(
  name='PortRange',
  full_name='PortRange',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start', full_name='PortRange.start', index=0,
      number=1, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%TCP/UDP port range start (inclusive).\262\246\035\0071-65535'))),
    _descriptor.FieldDescriptor(
      name='end', full_name='PortRange.end', index=1,
      number=2, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035#TCP/UDP port range end (inclusive).\262\246\035\0071-65535'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=32,
  serialized_end=177,
)


_TAG = _descriptor.Descriptor(
  name='Tag',
  full_name='Tag',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Tag.value', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='Tag.type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\212\246\035\003Tag\232\246\035\005value')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=179,
  serialized_end=255,
)


_TENANTCONFIGURATION = _descriptor.Descriptor(
  name='TenantConfiguration',
  full_name='TenantConfiguration',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tenant_vrf', full_name='TenantConfiguration.tenant_vrf', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\334\001When \"Per Tenant IP Domain\" is selected, each tenant gets its own routing domain that is not shared with any other tenant. When \"Share IP Domain across all tenants\" is selected, all tenants share the same routing domain.'))),
    _descriptor.FieldDescriptor(
      name='se_in_provider_context', full_name='TenantConfiguration.se_in_provider_context', index=1,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\244\002Controls the ownership of ServiceEngines. Service Engines can either be exclusively owned by each tenant or owned by the administrator and shared by all tenants. When ServiceEngines are owned by the administrator, each tenant can have either read access or no access to their Service Engines.'))),
    _descriptor.FieldDescriptor(
      name='tenant_access_to_provider_se', full_name='TenantConfiguration.tenant_access_to_provider_se', index=2,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=258,
  serialized_end=918,
)


_TENANT = _descriptor.Descriptor(
  name='Tenant',
  full_name='Tenant',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuid', full_name='Tenant.uuid', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='Tenant.name', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='local', full_name='Tenant.local', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=True,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360\247\035\001'))),
    _descriptor.FieldDescriptor(
      name='description', full_name='Tenant.description', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='config_settings', full_name='Tenant.config_settings', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='created_by', full_name='Tenant.created_by', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026Creator of this tenant'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\262\246\035\013TenantCheck\302\246\035\rTenantDefault\370\227\"\001')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=921,
  serialized_end=1138,
)


_IPADDRRANGE = _descriptor.Descriptor(
  name='IpAddrRange',
  full_name='IpAddrRange',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='begin', full_name='IpAddrRange.begin', index=0,
      number=1, type=11, cpp_type=10, label=2,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035 Starting IP address of the range'))),
    _descriptor.FieldDescriptor(
      name='end', full_name='IpAddrRange.end', index=1,
      number=2, type=11, cpp_type=10, label=2,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\036Ending IP address of the range'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\232\246\035\tbegin,end')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1141,
  serialized_end=1289,
)


_HTTPLOCALFILE = _descriptor.Descriptor(
  name='HTTPLocalFile',
  full_name='HTTPLocalFile',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content_type', full_name='HTTPLocalFile.content_type', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Mime-type of the content in the file.'))),
    _descriptor.FieldDescriptor(
      name='file_content', full_name='HTTPLocalFile.file_content', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0355File content to used in the local HTTP response body.\300\247\035\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1292,
  serialized_end=1457,
)


_VOIDRESPONSE = _descriptor.Descriptor(
  name='VoidResponse',
  full_name='VoidResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1459,
  serialized_end=1473,
)


_NULLOBJ = _descriptor.Descriptor(
  name='NullObj',
  full_name='NullObj',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1475,
  serialized_end=1484,
)


_PBDESCRIPTION = _descriptor.Descriptor(
  name='PBDescription',
  full_name='PBDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='file_name', full_name='PBDescription.file_name', index=0,
      number=60000, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type_name', full_name='PBDescription.type_name', index=1,
      number=60001, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1486,
  serialized_end=1543,
)


_TIMESTAMP = _descriptor.Descriptor(
  name='TimeStamp',
  full_name='TimeStamp',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='secs', full_name='TimeStamp.secs', index=0,
      number=1, type=3, cpp_type=2, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='usecs', full_name='TimeStamp.usecs', index=1,
      number=2, type=3, cpp_type=2, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\212\246\035\tTimeStamp')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1545,
  serialized_end=1600,
)


_OPERATIONALSTATUS = _descriptor.Descriptor(
  name='OperationalStatus',
  full_name='OperationalStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='state', full_name='OperationalStatus.state', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reason', full_name='OperationalStatus.reason', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reason_code', full_name='OperationalStatus.reason_code', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='last_changed_time', full_name='OperationalStatus.last_changed_time', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reason_code_string', full_name='OperationalStatus.reason_code_string', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\212\246\035\022Operational Status')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1603,
  serialized_end=1784,
)


_CONFIGURATIONSTATUS = _descriptor.Descriptor(
  name='ConfigurationStatus',
  full_name='ConfigurationStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='state', full_name='ConfigurationStatus.state', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reason', full_name='ConfigurationStatus.reason', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reason_code', full_name='ConfigurationStatus.reason_code', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='last_changed_time', full_name='ConfigurationStatus.last_changed_time', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pvt_data', full_name='ConfigurationStatus.pvt_data', index=4,
      number=5, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pvt_data_2', full_name='ConfigurationStatus.pvt_data_2', index=5,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reason_code_string', full_name='ConfigurationStatus.reason_code_string', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\212\246\035\024Configuration Status')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1787,
  serialized_end=2023,
)


_BASEOBJECTRUNTIME = _descriptor.Descriptor(
  name='BaseObjectRuntime',
  full_name='BaseObjectRuntime',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuid', full_name='BaseObjectRuntime.uuid', index=0,
      number=50000, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='BaseObjectRuntime.name', index=1,
      number=50001, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='slug', full_name='BaseObjectRuntime.slug', index=2,
      number=50002, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tenant_uuid', full_name='BaseObjectRuntime.tenant_uuid', index=3,
      number=50003, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2025,
  serialized_end=2119,
)


_VCENTERDEFAULTS = _descriptor.Descriptor(
  name='vCenterDefaults',
  full_name='vCenterDefaults',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='avi_internal_network', full_name='vCenterDefaults.avi_internal_network', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=_b("Avi Internal").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2121,
  serialized_end=2182,
)


_APPINFO = _descriptor.Descriptor(
  name='AppInfo',
  full_name='AppInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='app_hdr_name', full_name='AppInfo.app_hdr_name', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='app_hdr_value', full_name='AppInfo.app_hdr_value', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2184,
  serialized_end=2238,
)


_POOLUPDATE = _descriptor.Descriptor(
  name='PoolUpdate',
  full_name='PoolUpdate',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='action', full_name='PoolUpdate.action', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='obj_uuid', full_name='PoolUpdate.obj_uuid', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='server_ips', full_name='PoolUpdate.server_ips', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='vrf_uuid', full_name='PoolUpdate.vrf_uuid', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2240,
  serialized_end=2337,
)


_SERVERFILTER = _descriptor.Descriptor(
  name='ServerFilter',
  full_name='ServerFilter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='server_ip', full_name='ServerFilter.server_ip', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='server_mask', full_name='ServerFilter.server_mask', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='server_end_ip', full_name='ServerFilter.server_end_ip', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='server_port', full_name='ServerFilter.server_port', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2339,
  serialized_end=2455,
)


_IPADDRPORT = _descriptor.Descriptor(
  name='IpAddrPort',
  full_name='IpAddrPort',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='IpAddrPort.ip', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035?IP Address of host. One of IP address or hostname should be set'))),
    _descriptor.FieldDescriptor(
      name='port', full_name='IpAddrPort.port', index=1,
      number=2, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\025Port number of server\262\246\035\0071-65535'))),
    _descriptor.FieldDescriptor(
      name='hostname', full_name='IpAddrPort.hostname', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035?Hostname of server. One of IP address or hostname should be set'))),
    _descriptor.FieldDescriptor(
      name='name', full_name='IpAddrPort.name', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2458,
  serialized_end=2713,
)


_CUSTOMPARAMS = _descriptor.Descriptor(
  name='CustomParams',
  full_name='CustomParams',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='CustomParams.name', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='CustomParams.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_sensitive', full_name='CustomParams.is_sensitive', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_dynamic', full_name='CustomParams.is_dynamic', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2715,
  serialized_end=2814,
)


_GCPINFO = _descriptor.Descriptor(
  name='GcpInfo',
  full_name='GcpInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='project', full_name='GcpInfo.project', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\032Project this SE belongs to\360\247\035\001'))),
    _descriptor.FieldDescriptor(
      name='zone', full_name='GcpInfo.zone', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Zone this SE is part of\360\247\035\001'))),
    _descriptor.FieldDescriptor(
      name='network', full_name='GcpInfo.network', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\033Network this SE is assigned\360\247\035\001'))),
    _descriptor.FieldDescriptor(
      name='subnet', full_name='GcpInfo.subnet', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\032Subnet assigned to this SE\360\247\035\001'))),
    _descriptor.FieldDescriptor(
      name='hostname', full_name='GcpInfo.hostname', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\023Hostname of this SE\360\247\035\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2817,
  serialized_end=3079,
)


_DELETEFILTER = _descriptor.Descriptor(
  name='DeleteFilter',
  full_name='DeleteFilter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='force_delete', full_name='DeleteFilter.force_delete', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=True, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3081,
  serialized_end=3124,
)


_NSXSGINFO = _descriptor.Descriptor(
  name='NsxSgInfo',
  full_name='NsxSgInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='NsxSgInfo.name', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.1.1\242\246\035&Name of the NSX Manager Security Group'))),
    _descriptor.FieldDescriptor(
      name='object_id', full_name='NsxSgInfo.object_id', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.1.1\242\246\035*NSX Manager objectId of the Security Group'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3127,
  serialized_end=3283,
)


_GEOLOCATION = _descriptor.Descriptor(
  name='GeoLocation',
  full_name='GeoLocation',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='latitude', full_name='GeoLocation.latitude', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.1.1\222\210\'\004full\242\246\035sLatitude of the location. This is represented as degrees.minutes. The range is from -90.0 (south) to +90.0 (north).\262\246\035\013-90.0-+90.0'))),
    _descriptor.FieldDescriptor(
      name='longitude', full_name='GeoLocation.longitude', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.1.1\222\210\'\004full\242\246\035tLongitude of the location. This is represented as degrees.minutes. The range is from -180.0 (west) to +180.0 (east).\262\246\035\r-180.0-+180.0'))),
    _descriptor.FieldDescriptor(
      name='name', full_name='GeoLocation.name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\350\246\035\200\001\222\210\'\004full\212\210\'\014alphabetical\352\247\035\00617.1.1\242\246\035/Location name in the format Country/State/City.'))),
    _descriptor.FieldDescriptor(
      name='tag', full_name='GeoLocation.tag', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\350\246\035 \222\210\'\004full\212\210\'\014alphabetical\352\247\035\00617.1.1\242\246\035&Location tag string - example: USEast.'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3286,
  serialized_end=3852,
)


_PROPERTY = _descriptor.Descriptor(
  name='Property',
  full_name='Property',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='Property.name', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\016Property name.\352\247\035\00617.2.1'))),
    _descriptor.FieldDescriptor(
      name='value', full_name='Property.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\017Property value.\352\247\035\00617.2.1'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\232\246\035\004name')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3854,
  serialized_end=3964,
)


_CUSTOMTAG = _descriptor.Descriptor(
  name='CustomTag',
  full_name='CustomTag',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tag_key', full_name='CustomTag.tag_key', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tag_val', full_name='CustomTag.tag_val', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3966,
  serialized_end=4011,
)


_PLACEMENTNETWORK = _descriptor.Descriptor(
  name='PlacementNetwork',
  full_name='PlacementNetwork',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='network_uuid', full_name='PlacementNetwork.network_uuid', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\202\247\035\007Network'))),
    _descriptor.FieldDescriptor(
      name='subnet', full_name='PlacementNetwork.subnet', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4013,
  serialized_end=4097,
)


_SENETWORKSUBNET = _descriptor.Descriptor(
  name='SeNetworkSubnet',
  full_name='SeNetworkSubnet',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='network_uuid', full_name='SeNetworkSubnet.network_uuid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=True, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\252\247\035\007Network\352\247\035\00617.2.4'))),
    _descriptor.FieldDescriptor(
      name='subnet', full_name='SeNetworkSubnet.subnet', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.2.4'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4099,
  serialized_end=4206,
)

_TAG.fields_by_name['type'].enum_type = _TAGTYPE
_TENANT.fields_by_name['config_settings'].message_type = _TENANTCONFIGURATION
_IPADDRRANGE.fields_by_name['begin'].message_type = options__pb2._IPADDR
_IPADDRRANGE.fields_by_name['end'].message_type = options__pb2._IPADDR
_OPERATIONALSTATUS.fields_by_name['state'].enum_type = _OPERATIONALSTATE
_OPERATIONALSTATUS.fields_by_name['last_changed_time'].message_type = _TIMESTAMP
_CONFIGURATIONSTATUS.fields_by_name['state'].enum_type = _CONFIGURATIONSTATE
_CONFIGURATIONSTATUS.fields_by_name['last_changed_time'].message_type = _TIMESTAMP
_POOLUPDATE.fields_by_name['action'].enum_type = _POOLACTION
_SERVERFILTER.fields_by_name['server_ip'].message_type = options__pb2._IPADDR
_SERVERFILTER.fields_by_name['server_end_ip'].message_type = options__pb2._IPADDR
_IPADDRPORT.fields_by_name['ip'].message_type = options__pb2._IPADDR
_PLACEMENTNETWORK.fields_by_name['subnet'].message_type = options__pb2._IPADDRPREFIX
_SENETWORKSUBNET.fields_by_name['subnet'].message_type = options__pb2._IPADDRPREFIX
DESCRIPTOR.message_types_by_name['PortRange'] = _PORTRANGE
DESCRIPTOR.message_types_by_name['Tag'] = _TAG
DESCRIPTOR.message_types_by_name['TenantConfiguration'] = _TENANTCONFIGURATION
DESCRIPTOR.message_types_by_name['Tenant'] = _TENANT
DESCRIPTOR.message_types_by_name['IpAddrRange'] = _IPADDRRANGE
DESCRIPTOR.message_types_by_name['HTTPLocalFile'] = _HTTPLOCALFILE
DESCRIPTOR.message_types_by_name['VoidResponse'] = _VOIDRESPONSE
DESCRIPTOR.message_types_by_name['NullObj'] = _NULLOBJ
DESCRIPTOR.message_types_by_name['PBDescription'] = _PBDESCRIPTION
DESCRIPTOR.message_types_by_name['TimeStamp'] = _TIMESTAMP
DESCRIPTOR.message_types_by_name['OperationalStatus'] = _OPERATIONALSTATUS
DESCRIPTOR.message_types_by_name['ConfigurationStatus'] = _CONFIGURATIONSTATUS
DESCRIPTOR.message_types_by_name['BaseObjectRuntime'] = _BASEOBJECTRUNTIME
DESCRIPTOR.message_types_by_name['vCenterDefaults'] = _VCENTERDEFAULTS
DESCRIPTOR.message_types_by_name['AppInfo'] = _APPINFO
DESCRIPTOR.message_types_by_name['PoolUpdate'] = _POOLUPDATE
DESCRIPTOR.message_types_by_name['ServerFilter'] = _SERVERFILTER
DESCRIPTOR.message_types_by_name['IpAddrPort'] = _IPADDRPORT
DESCRIPTOR.message_types_by_name['CustomParams'] = _CUSTOMPARAMS
DESCRIPTOR.message_types_by_name['GcpInfo'] = _GCPINFO
DESCRIPTOR.message_types_by_name['DeleteFilter'] = _DELETEFILTER
DESCRIPTOR.message_types_by_name['NsxSgInfo'] = _NSXSGINFO
DESCRIPTOR.message_types_by_name['GeoLocation'] = _GEOLOCATION
DESCRIPTOR.message_types_by_name['Property'] = _PROPERTY
DESCRIPTOR.message_types_by_name['CustomTag'] = _CUSTOMTAG
DESCRIPTOR.message_types_by_name['PlacementNetwork'] = _PLACEMENTNETWORK
DESCRIPTOR.message_types_by_name['SeNetworkSubnet'] = _SENETWORKSUBNET
DESCRIPTOR.enum_types_by_name['AviObjectType'] = _AVIOBJECTTYPE
DESCRIPTOR.enum_types_by_name['ConnectionType'] = _CONNECTIONTYPE
DESCRIPTOR.enum_types_by_name['Hypervisor'] = _HYPERVISOR
DESCRIPTOR.enum_types_by_name['ImageFormat'] = _IMAGEFORMAT
DESCRIPTOR.enum_types_by_name['TagType'] = _TAGTYPE
DESCRIPTOR.enum_types_by_name['IpAddrMode'] = _IPADDRMODE
DESCRIPTOR.enum_types_by_name['ProtocolType'] = _PROTOCOLTYPE
DESCRIPTOR.enum_types_by_name['HTTPProtocol'] = _HTTPPROTOCOL
DESCRIPTOR.enum_types_by_name['HTTPMethod'] = _HTTPMETHOD
DESCRIPTOR.enum_types_by_name['HTTPVersion'] = _HTTPVERSION
DESCRIPTOR.enum_types_by_name['HTTPRedirectStatusCode'] = _HTTPREDIRECTSTATUSCODE
DESCRIPTOR.enum_types_by_name['HTTPLocalResponseStatusCode'] = _HTTPLOCALRESPONSESTATUSCODE
DESCRIPTOR.enum_types_by_name['MatchCase'] = _MATCHCASE
DESCRIPTOR.enum_types_by_name['MatchOperation'] = _MATCHOPERATION
DESCRIPTOR.enum_types_by_name['HdrMatchOperation'] = _HDRMATCHOPERATION
DESCRIPTOR.enum_types_by_name['StringOperation'] = _STRINGOPERATION
DESCRIPTOR.enum_types_by_name['QueryMatchOperation'] = _QUERYMATCHOPERATION
DESCRIPTOR.enum_types_by_name['AdminState'] = _ADMINSTATE
DESCRIPTOR.enum_types_by_name['OperationalState'] = _OPERATIONALSTATE
DESCRIPTOR.enum_types_by_name['ConfigurationState'] = _CONFIGURATIONSTATE
DESCRIPTOR.enum_types_by_name['Privilege'] = _PRIVILEGE
DESCRIPTOR.enum_types_by_name['ResourceCategory'] = _RESOURCECATEGORY
DESCRIPTOR.enum_types_by_name['PoolAction'] = _POOLACTION
DESCRIPTOR.enum_types_by_name['HTTPPolicyVar'] = _HTTPPOLICYVAR
DESCRIPTOR.enum_types_by_name['CloudType'] = _CLOUDTYPE
DESCRIPTOR.enum_types_by_name['SeVerNum'] = _SEVERNUM
DESCRIPTOR.enum_types_by_name['AutoScaleAction'] = _AUTOSCALEACTION
DESCRIPTOR.enum_types_by_name['CONSTANTS'] = _CONSTANTS
DESCRIPTOR.enum_types_by_name['CloudDeprecated'] = _CLOUDDEPRECATED
DESCRIPTOR.enum_types_by_name['ApicContext'] = _APICCONTEXT
DESCRIPTOR.enum_types_by_name['ActiveStandbySeTag'] = _ACTIVESTANDBYSETAG
DESCRIPTOR.enum_types_by_name['Protocol'] = _PROTOCOL
DESCRIPTOR.enum_types_by_name['ContainerType'] = _CONTAINERTYPE

PortRange = _reflection.GeneratedProtocolMessageType('PortRange', (_message.Message,), dict(
  DESCRIPTOR = _PORTRANGE,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:PortRange)
  ))
_sym_db.RegisterMessage(PortRange)

Tag = _reflection.GeneratedProtocolMessageType('Tag', (_message.Message,), dict(
  DESCRIPTOR = _TAG,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:Tag)
  ))
_sym_db.RegisterMessage(Tag)

TenantConfiguration = _reflection.GeneratedProtocolMessageType('TenantConfiguration', (_message.Message,), dict(
  DESCRIPTOR = _TENANTCONFIGURATION,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:TenantConfiguration)
  ))
_sym_db.RegisterMessage(TenantConfiguration)

Tenant = _reflection.GeneratedProtocolMessageType('Tenant', (_message.Message,), dict(
  DESCRIPTOR = _TENANT,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:Tenant)
  ))
_sym_db.RegisterMessage(Tenant)

IpAddrRange = _reflection.GeneratedProtocolMessageType('IpAddrRange', (_message.Message,), dict(
  DESCRIPTOR = _IPADDRRANGE,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:IpAddrRange)
  ))
_sym_db.RegisterMessage(IpAddrRange)

HTTPLocalFile = _reflection.GeneratedProtocolMessageType('HTTPLocalFile', (_message.Message,), dict(
  DESCRIPTOR = _HTTPLOCALFILE,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:HTTPLocalFile)
  ))
_sym_db.RegisterMessage(HTTPLocalFile)

VoidResponse = _reflection.GeneratedProtocolMessageType('VoidResponse', (_message.Message,), dict(
  DESCRIPTOR = _VOIDRESPONSE,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:VoidResponse)
  ))
_sym_db.RegisterMessage(VoidResponse)

NullObj = _reflection.GeneratedProtocolMessageType('NullObj', (_message.Message,), dict(
  DESCRIPTOR = _NULLOBJ,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:NullObj)
  ))
_sym_db.RegisterMessage(NullObj)

PBDescription = _reflection.GeneratedProtocolMessageType('PBDescription', (_message.Message,), dict(
  DESCRIPTOR = _PBDESCRIPTION,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:PBDescription)
  ))
_sym_db.RegisterMessage(PBDescription)

TimeStamp = _reflection.GeneratedProtocolMessageType('TimeStamp', (_message.Message,), dict(
  DESCRIPTOR = _TIMESTAMP,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:TimeStamp)
  ))
_sym_db.RegisterMessage(TimeStamp)

OperationalStatus = _reflection.GeneratedProtocolMessageType('OperationalStatus', (_message.Message,), dict(
  DESCRIPTOR = _OPERATIONALSTATUS,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:OperationalStatus)
  ))
_sym_db.RegisterMessage(OperationalStatus)

ConfigurationStatus = _reflection.GeneratedProtocolMessageType('ConfigurationStatus', (_message.Message,), dict(
  DESCRIPTOR = _CONFIGURATIONSTATUS,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:ConfigurationStatus)
  ))
_sym_db.RegisterMessage(ConfigurationStatus)

BaseObjectRuntime = _reflection.GeneratedProtocolMessageType('BaseObjectRuntime', (_message.Message,), dict(
  DESCRIPTOR = _BASEOBJECTRUNTIME,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:BaseObjectRuntime)
  ))
_sym_db.RegisterMessage(BaseObjectRuntime)

vCenterDefaults = _reflection.GeneratedProtocolMessageType('vCenterDefaults', (_message.Message,), dict(
  DESCRIPTOR = _VCENTERDEFAULTS,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:vCenterDefaults)
  ))
_sym_db.RegisterMessage(vCenterDefaults)

AppInfo = _reflection.GeneratedProtocolMessageType('AppInfo', (_message.Message,), dict(
  DESCRIPTOR = _APPINFO,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:AppInfo)
  ))
_sym_db.RegisterMessage(AppInfo)

PoolUpdate = _reflection.GeneratedProtocolMessageType('PoolUpdate', (_message.Message,), dict(
  DESCRIPTOR = _POOLUPDATE,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:PoolUpdate)
  ))
_sym_db.RegisterMessage(PoolUpdate)

ServerFilter = _reflection.GeneratedProtocolMessageType('ServerFilter', (_message.Message,), dict(
  DESCRIPTOR = _SERVERFILTER,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:ServerFilter)
  ))
_sym_db.RegisterMessage(ServerFilter)

IpAddrPort = _reflection.GeneratedProtocolMessageType('IpAddrPort', (_message.Message,), dict(
  DESCRIPTOR = _IPADDRPORT,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:IpAddrPort)
  ))
_sym_db.RegisterMessage(IpAddrPort)

CustomParams = _reflection.GeneratedProtocolMessageType('CustomParams', (_message.Message,), dict(
  DESCRIPTOR = _CUSTOMPARAMS,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:CustomParams)
  ))
_sym_db.RegisterMessage(CustomParams)

GcpInfo = _reflection.GeneratedProtocolMessageType('GcpInfo', (_message.Message,), dict(
  DESCRIPTOR = _GCPINFO,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:GcpInfo)
  ))
_sym_db.RegisterMessage(GcpInfo)

DeleteFilter = _reflection.GeneratedProtocolMessageType('DeleteFilter', (_message.Message,), dict(
  DESCRIPTOR = _DELETEFILTER,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:DeleteFilter)
  ))
_sym_db.RegisterMessage(DeleteFilter)

NsxSgInfo = _reflection.GeneratedProtocolMessageType('NsxSgInfo', (_message.Message,), dict(
  DESCRIPTOR = _NSXSGINFO,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:NsxSgInfo)
  ))
_sym_db.RegisterMessage(NsxSgInfo)

GeoLocation = _reflection.GeneratedProtocolMessageType('GeoLocation', (_message.Message,), dict(
  DESCRIPTOR = _GEOLOCATION,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:GeoLocation)
  ))
_sym_db.RegisterMessage(GeoLocation)

Property = _reflection.GeneratedProtocolMessageType('Property', (_message.Message,), dict(
  DESCRIPTOR = _PROPERTY,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:Property)
  ))
_sym_db.RegisterMessage(Property)

CustomTag = _reflection.GeneratedProtocolMessageType('CustomTag', (_message.Message,), dict(
  DESCRIPTOR = _CUSTOMTAG,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:CustomTag)
  ))
_sym_db.RegisterMessage(CustomTag)

PlacementNetwork = _reflection.GeneratedProtocolMessageType('PlacementNetwork', (_message.Message,), dict(
  DESCRIPTOR = _PLACEMENTNETWORK,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:PlacementNetwork)
  ))
_sym_db.RegisterMessage(PlacementNetwork)

SeNetworkSubnet = _reflection.GeneratedProtocolMessageType('SeNetworkSubnet', (_message.Message,), dict(
  DESCRIPTOR = _SENETWORKSUBNET,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:SeNetworkSubnet)
  ))
_sym_db.RegisterMessage(SeNetworkSubnet)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\030com.avinetworks.protobuf\210\001\001'))
_HYPERVISOR.values_by_name["VMWARE_ESX"].has_options = True
_HYPERVISOR.values_by_name["VMWARE_ESX"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\nVMWARE_ESX\222\227\"\025VMware ESX Hypervisor'))
_HYPERVISOR.values_by_name["KVM"].has_options = True
_HYPERVISOR.values_by_name["KVM"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\003KVM\222\227\"\016KVM Hypervisor'))
_HYPERVISOR.values_by_name["VMWARE_VSAN"].has_options = True
_HYPERVISOR.values_by_name["VMWARE_VSAN"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013VMWARE_VSAN\222\227\"\037VMware ESX Hypervisor with VSAN'))
_HYPERVISOR.values_by_name["XEN"].has_options = True
_HYPERVISOR.values_by_name["XEN"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\003Xen\222\227\"\016Xen Hypervisor'))
_PROTOCOLTYPE.values_by_name["PROTOCOL_TYPE_TCP_PROXY"].has_options = True
_PROTOCOLTYPE.values_by_name["PROTOCOL_TYPE_TCP_PROXY"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tTCP Proxy\272\227\"\003tcp'))
_PROTOCOLTYPE.values_by_name["PROTOCOL_TYPE_TCP_FAST_PATH"].has_options = True
_PROTOCOLTYPE.values_by_name["PROTOCOL_TYPE_TCP_FAST_PATH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\rTCP Fast Path\272\227\"\003tcp'))
_PROTOCOLTYPE.values_by_name["PROTOCOL_TYPE_UDP_FAST_PATH"].has_options = True
_PROTOCOLTYPE.values_by_name["PROTOCOL_TYPE_UDP_FAST_PATH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\rUDP Fast Path\272\227\"\003udp'))
_HTTPPROTOCOL.values_by_name["HTTP"].has_options = True
_HTTPPROTOCOL.values_by_name["HTTP"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\rHTTP Protocol'))
_HTTPPROTOCOL.values_by_name["HTTPS"].has_options = True
_HTTPPROTOCOL.values_by_name["HTTPS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\024Secure HTTP Protocol'))
_HTTPMETHOD.values_by_name["HTTP_METHOD_GET"].has_options = True
_HTTPMETHOD.values_by_name["HTTP_METHOD_GET"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\003GET\222\227\"\017HTTP get method'))
_HTTPMETHOD.values_by_name["HTTP_METHOD_HEAD"].has_options = True
_HTTPMETHOD.values_by_name["HTTP_METHOD_HEAD"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\004HEAD\222\227\"\020HTTP head method'))
_HTTPMETHOD.values_by_name["HTTP_METHOD_PUT"].has_options = True
_HTTPMETHOD.values_by_name["HTTP_METHOD_PUT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\003PUT\222\227\"\017HTTP put method'))
_HTTPMETHOD.values_by_name["HTTP_METHOD_DELETE"].has_options = True
_HTTPMETHOD.values_by_name["HTTP_METHOD_DELETE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006DELETE\222\227\"\022HTTP delete method'))
_HTTPMETHOD.values_by_name["HTTP_METHOD_POST"].has_options = True
_HTTPMETHOD.values_by_name["HTTP_METHOD_POST"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\004POST\222\227\"\020HTTP post method'))
_HTTPMETHOD.values_by_name["HTTP_METHOD_OPTIONS"].has_options = True
_HTTPMETHOD.values_by_name["HTTP_METHOD_OPTIONS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\007OPTIONS\222\227\"\023HTTP options method'))
_HTTPVERSION.values_by_name["ZERO_NINE"].has_options = True
_HTTPVERSION.values_by_name["ZERO_NINE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\0030.9\222\227\"\031HTTP protocol version 0.9'))
_HTTPVERSION.values_by_name["ONE_ZERO"].has_options = True
_HTTPVERSION.values_by_name["ONE_ZERO"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\0031.0\222\227\"\031HTTP protocol version 1.0'))
_HTTPVERSION.values_by_name["ONE_ONE"].has_options = True
_HTTPVERSION.values_by_name["ONE_ONE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\0031.1\222\227\"\031HTTP protocol version 1.1'))
_HTTPREDIRECTSTATUSCODE.values_by_name["HTTP_REDIRECT_STATUS_CODE_301"].has_options = True
_HTTPREDIRECTSTATUSCODE.values_by_name["HTTP_REDIRECT_STATUS_CODE_301"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\025301 Moved Permanently'))
_HTTPREDIRECTSTATUSCODE.values_by_name["HTTP_REDIRECT_STATUS_CODE_302"].has_options = True
_HTTPREDIRECTSTATUSCODE.values_by_name["HTTP_REDIRECT_STATUS_CODE_302"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\t302 Found'))
_HTTPREDIRECTSTATUSCODE.values_by_name["HTTP_REDIRECT_STATUS_CODE_307"].has_options = True
_HTTPREDIRECTSTATUSCODE.values_by_name["HTTP_REDIRECT_STATUS_CODE_307"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\")307 Moved Temporarily (only for HTTP/1.1)'))
_HTTPLOCALRESPONSESTATUSCODE.values_by_name["HTTP_LOCAL_RESPONSE_STATUS_CODE_200"].has_options = True
_HTTPLOCALRESPONSESTATUSCODE.values_by_name["HTTP_LOCAL_RESPONSE_STATUS_CODE_200"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\006200 OK'))
_HTTPLOCALRESPONSESTATUSCODE.values_by_name["HTTP_LOCAL_RESPONSE_STATUS_CODE_403"].has_options = True
_HTTPLOCALRESPONSESTATUSCODE.values_by_name["HTTP_LOCAL_RESPONSE_STATUS_CODE_403"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\r403 Forbidden'))
_HTTPLOCALRESPONSESTATUSCODE.values_by_name["HTTP_LOCAL_RESPONSE_STATUS_CODE_404"].has_options = True
_HTTPLOCALRESPONSESTATUSCODE.values_by_name["HTTP_LOCAL_RESPONSE_STATUS_CODE_404"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\r404 Not Found'))
_HTTPLOCALRESPONSESTATUSCODE.values_by_name["HTTP_LOCAL_RESPONSE_STATUS_CODE_429"].has_options = True
_HTTPLOCALRESPONSESTATUSCODE.values_by_name["HTTP_LOCAL_RESPONSE_STATUS_CODE_429"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\" 429 Too Many Requests (RFC 6585)'))
_MATCHCASE.values_by_name["SENSITIVE"].has_options = True
_MATCHCASE.values_by_name["SENSITIVE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tSensitive\222\227\"\024case sensitive match'))
_MATCHCASE.values_by_name["INSENSITIVE"].has_options = True
_MATCHCASE.values_by_name["INSENSITIVE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Insensitive\222\227\"\026case insensitive match'))
_MATCHOPERATION.values_by_name["IS_IN"].has_options = True
_MATCHOPERATION.values_by_name["IS_IN"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\005Is in\222\227\"\035is in the configured value(s)'))
_MATCHOPERATION.values_by_name["IS_NOT_IN"].has_options = True
_MATCHOPERATION.values_by_name["IS_NOT_IN"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tIs not in\222\227\"!is not in the configured value(s)'))
_HDRMATCHOPERATION.values_by_name["HDR_EXISTS"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_EXISTS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006Exists\222\227\"!header exists in the HTTP request'))
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_EXIST"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_EXIST"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\016Does not exist\222\227\")header does not exist in the HTTP request'))
_HDRMATCHOPERATION.values_by_name["HDR_BEGINS_WITH"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_BEGINS_WITH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Begins with\222\227\"/header value begins with the configure value(s)'))
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_BEGIN_WITH"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_BEGIN_WITH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\023Does not begin with\222\227\"8header value does not begins with the configure value(s)'))
_HDRMATCHOPERATION.values_by_name["HDR_CONTAINS"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_CONTAINS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Contains\222\227\")header value contains configured value(s)'))
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_CONTAIN"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_CONTAIN"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\020Does not contain\222\227\"3header value  does not contains configured value(s)'))
_HDRMATCHOPERATION.values_by_name["HDR_ENDS_WITH"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_ENDS_WITH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tEnds with\222\227\".header value ends with the configured value(s)'))
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_END_WITH"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_END_WITH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\021Does not end with\222\227\"7header value does not ends with the configured value(s)'))
_HDRMATCHOPERATION.values_by_name["HDR_EQUALS"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_EQUALS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006Equals\222\227\"+header value equals the configured value(s)'))
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_EQUAL"].has_options = True
_HDRMATCHOPERATION.values_by_name["HDR_DOES_NOT_EQUAL"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\016Does not equal\222\227\"4header value does not equals the configured value(s)'))
_STRINGOPERATION.values_by_name["BEGINS_WITH"].has_options = True
_STRINGOPERATION.values_by_name["BEGINS_WITH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Begins with\222\227\"#begins with the configured value(s)'))
_STRINGOPERATION.values_by_name["DOES_NOT_BEGIN_WITH"].has_options = True
_STRINGOPERATION.values_by_name["DOES_NOT_BEGIN_WITH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\023Does not begin with\222\227\"+does not begin with the configured value(s)'))
_STRINGOPERATION.values_by_name["CONTAINS"].has_options = True
_STRINGOPERATION.values_by_name["CONTAINS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Contains\222\227\" contains the configured value(s)'))
_STRINGOPERATION.values_by_name["DOES_NOT_CONTAIN"].has_options = True
_STRINGOPERATION.values_by_name["DOES_NOT_CONTAIN"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\020Does not contain\222\227\"(does not contain the configured value(s)'))
_STRINGOPERATION.values_by_name["ENDS_WITH"].has_options = True
_STRINGOPERATION.values_by_name["ENDS_WITH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tEnds with\222\227\"!ends with the configured value(s)'))
_STRINGOPERATION.values_by_name["DOES_NOT_END_WITH"].has_options = True
_STRINGOPERATION.values_by_name["DOES_NOT_END_WITH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\021Does not end with\222\227\")does not end with the configured value(s)'))
_STRINGOPERATION.values_by_name["EQUALS"].has_options = True
_STRINGOPERATION.values_by_name["EQUALS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006Equals\222\227\"\036equals the configured value(s)'))
_STRINGOPERATION.values_by_name["DOES_NOT_EQUAL"].has_options = True
_STRINGOPERATION.values_by_name["DOES_NOT_EQUAL"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\016Does not equal\222\227\"&does not equal the configured value(s)'))
_STRINGOPERATION.values_by_name["REGEX_MATCH"].has_options = True
_STRINGOPERATION.values_by_name["REGEX_MATCH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\025Regex pattern matches\222\227\"2regex pattern matches with the configured value(s)'))
_STRINGOPERATION.values_by_name["REGEX_DOES_NOT_MATCH"].has_options = True
_STRINGOPERATION.values_by_name["REGEX_DOES_NOT_MATCH"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\034Regex pattern does not match\222\227\"9regex pattern does not match with the configured value(s)'))
_QUERYMATCHOPERATION.values_by_name["QUERY_MATCH_CONTAINS"].has_options = True
_QUERYMATCHOPERATION.values_by_name["QUERY_MATCH_CONTAINS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Contains\222\227\" contains the configured value(s)'))
_ADMINSTATE.values_by_name["ENABLED"].has_options = True
_ADMINSTATE.values_by_name["ENABLED"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\007Enabled'))
_ADMINSTATE.values_by_name["DISABLED"].has_options = True
_ADMINSTATE.values_by_name["DISABLED"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Disabled'))
_OPERATIONALSTATE.values_by_name["OPER_DOWN"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_DOWN"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\022Operationally down'))
_OPERATIONALSTATE.values_by_name["OPER_CREATING"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_CREATING"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\" Controller is Creating resources'))
_OPERATIONALSTATE.values_by_name["OPER_RESOURCES"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_RESOURCES"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"7Controller is waiting for resources to become available'))
_OPERATIONALSTATE.values_by_name["OPER_INACTIVE"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_INACTIVE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\",Controller is not attempting to place object'))
_OPERATIONALSTATE.values_by_name["OPER_DISABLED"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_DISABLED"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\022Object is Disabled'))
_OPERATIONALSTATE.values_by_name["OPER_UNUSED"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_UNUSED"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"(Object not attached to a Virtual Service'))
_OPERATIONALSTATE.values_by_name["OPER_UNKNOWN"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_UNKNOWN"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\rUnknown state'))
_OPERATIONALSTATE.values_by_name["OPER_UPGRADING"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_UPGRADING"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\023Upgrade in progress'))
_OPERATIONALSTATE.values_by_name["OPER_SE_PROCESSING"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_SE_PROCESSING"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"$Service Engine is processing request'))
_OPERATIONALSTATE.values_by_name["OPER_PARTITIONED"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_PARTITIONED"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\033Unreachable from Controller'))
_OPERATIONALSTATE.values_by_name["OPER_DISABLING"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_DISABLING"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"9Service Engine awaiting Migration of all Virtual Services'))
_OPERATIONALSTATE.values_by_name["OPER_FAILED"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_FAILED"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\031Currently in failed state'))
_OPERATIONALSTATE.values_by_name["OPER_UNAVAIL"].has_options = True
_OPERATIONALSTATE.values_by_name["OPER_UNAVAIL"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\034Object status is unavailable'))
_PRIVILEGE.values_by_name["NO_ACCESS"].has_options = True
_PRIVILEGE.values_by_name["NO_ACCESS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\tNo Access'))
_PRIVILEGE.values_by_name["READ_ACCESS"].has_options = True
_PRIVILEGE.values_by_name["READ_ACCESS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Read Access'))
_PRIVILEGE.values_by_name["WRITE_ACCESS"].has_options = True
_PRIVILEGE.values_by_name["WRITE_ACCESS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\014Write Access'))
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_APPLICATION"].has_options = True
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_APPLICATION"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\013Application'))
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_ACCOUNT"].has_options = True
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_ACCOUNT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\007Account'))
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_PROFILES"].has_options = True
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_PROFILES"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Profiles'))
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_INFRASTRUCTURE"].has_options = True
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_INFRASTRUCTURE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\016Infrastructure'))
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_SYSTEM"].has_options = True
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_SYSTEM"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\006System'))
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_SECURITY"].has_options = True
_RESOURCECATEGORY.values_by_name["RESOURCE_CATEGORY_SECURITY"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"\010Security'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_CLIENT_IP"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_CLIENT_IP"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"0Variable to get client IP address of the request'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_VS_PORT"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_VS_PORT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"8Variable to get virtual service port the request came on'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_VS_IP"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_VS_IP"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"FVariable to get IP address of the virtual service the request came for'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_HTTP_HDR"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_HTTP_HDR"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"<Variable to get value of the HTTP header in the HTTP request'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_FINGERPRINT"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_FINGERPRINT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\"SSL Client Certificate fingerprint'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_SERIAL"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_SERIAL"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"$SSL Client Certificate serial number'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_ISSUER"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_ISSUER"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\"SSL Client Certificate Issuer name'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_SUBJECT"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_SUBJECT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"#SSL Client Certificate Subject name'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_RAW"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CLIENT_RAW"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"0The whole SSL client certificate in a PEM format'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_PROTOCOL"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_PROTOCOL"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"+SSL protocol negotiated for this connection'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_SERVER_NAME"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_SERVER_NAME"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"!Server name requested through SNI'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_USER_NAME"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_USER_NAME"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"4Username obtained from http request using basic auth'))
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CIPHER"].has_options = True
_HTTPPOLICYVAR.values_by_name["HTTP_POLICY_VAR_SSL_CIPHER"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"SCipher suite used for the SSL/TLS connection between the client and virtual service'))
_CLOUDTYPE.values_by_name["CLOUD_NONE"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_NONE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\004None\252\231\"\006\010\003\010\002\010\005\212\227\"\004None'))
_CLOUDTYPE.values_by_name["CLOUD_VCENTER"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_VCENTER"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\032VMware vCenter/vSphere ESX\252\231\"\004\010\003\010\005\212\227\"\032VMware vCenter/vSphere ESX'))
_CLOUDTYPE.values_by_name["CLOUD_OPENSTACK"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_OPENSTACK"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\tOpenStack\252\231\"\004\010\003\010\005\212\227\"\tOpenStack'))
_CLOUDTYPE.values_by_name["CLOUD_AWS"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_AWS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\023Amazon Web Services\252\231\"\004\010\003\010\005\212\227\"\003AWS'))
_CLOUDTYPE.values_by_name["CLOUD_VCA"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_VCA"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\021VMware vCloud Air\252\231\"\004\010\003\010\005\212\227\"\nvCloud Air'))
_CLOUDTYPE.values_by_name["CLOUD_APIC"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_APIC"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\004Apic\252\231\"\004\010\003\010\005\212\227\"\004Apic'))
_CLOUDTYPE.values_by_name["CLOUD_MESOS"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_MESOS"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\005Mesos\252\231\"\006\010\004\010\003\010\005\212\227\"\005Mesos'))
_CLOUDTYPE.values_by_name["CLOUD_LINUXSERVER"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_LINUXSERVER"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\014Linux Server\252\231\"\006\010\003\010\002\010\005\212\227\"\014Linux Server'))
_CLOUDTYPE.values_by_name["CLOUD_DOCKER_UCP"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_DOCKER_UCP"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\036Docker Universal Control Plane\252\231\"\006\010\004\010\003\010\005\212\227\"\036Docker Universal Control Plane'))
_CLOUDTYPE.values_by_name["CLOUD_RANCHER"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_RANCHER"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\rRancher Cloud\252\231\"\006\010\004\010\003\010\005\212\227\"\rRancher Cloud'))
_CLOUDTYPE.values_by_name["CLOUD_OSHIFT_K8S"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_OSHIFT_K8S"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\032OpenShift/Kubernetes Cloud\252\231\"\006\010\004\010\003\010\005\212\227\"\032OpenShift/Kubernetes Cloud'))
_CLOUDTYPE.values_by_name["CLOUD_AZURE"].has_options = True
_CLOUDTYPE.values_by_name["CLOUD_AZURE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\013Azure Cloud\252\231\"\004\010\003\010\005\212\227\"\013Azure Cloud'))
_SEVERNUM.values_by_name["SE_VER_1"].has_options = True
_SEVERNUM.values_by_name["SE_VER_1"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"&Ver 1 SE\'s create UUID from dmi_decode'))
_SEVERNUM.values_by_name["SE_VER_2"].has_options = True
_SEVERNUM.values_by_name["SE_VER_2"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"!Ver 2 SE\'s create UUID from vNic0'))
_AUTOSCALEACTION.values_by_name["SCALEOUT"].has_options = True
_AUTOSCALEACTION.values_by_name["SCALEOUT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\033Server AutoScale out Action'))
_AUTOSCALEACTION.values_by_name["SCALEIN"].has_options = True
_AUTOSCALEACTION.values_by_name["SCALEIN"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"\032Server AutoScale in Action'))
_APICCONTEXT.values_by_name["SINGLE_CONTEXT"].has_options = True
_APICCONTEXT.values_by_name["SINGLE_CONTEXT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"+Single Context Aware for Avi Device in APIC'))
_APICCONTEXT.values_by_name["MULTI_CONTEXT"].has_options = True
_APICCONTEXT.values_by_name["MULTI_CONTEXT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\222\227\"*Multi Context Aware for Avi Device in APIC'))
_PORTRANGE.fields_by_name['start'].has_options = True
_PORTRANGE.fields_by_name['start']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%TCP/UDP port range start (inclusive).\262\246\035\0071-65535'))
_PORTRANGE.fields_by_name['end'].has_options = True
_PORTRANGE.fields_by_name['end']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035#TCP/UDP port range end (inclusive).\262\246\035\0071-65535'))
_TAG.has_options = True
_TAG._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\212\246\035\003Tag\232\246\035\005value'))
_TENANTCONFIGURATION.fields_by_name['tenant_vrf'].has_options = True
_TENANTCONFIGURATION.fields_by_name['tenant_vrf']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\334\001When \"Per Tenant IP Domain\" is selected, each tenant gets its own routing domain that is not shared with any other tenant. When \"Share IP Domain across all tenants\" is selected, all tenants share the same routing domain.'))
_TENANTCONFIGURATION.fields_by_name['se_in_provider_context'].has_options = True
_TENANTCONFIGURATION.fields_by_name['se_in_provider_context']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\244\002Controls the ownership of ServiceEngines. Service Engines can either be exclusively owned by each tenant or owned by the administrator and shared by all tenants. When ServiceEngines are owned by the administrator, each tenant can have either read access or no access to their Service Engines.'))
_TENANT.fields_by_name['local'].has_options = True
_TENANT.fields_by_name['local']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360\247\035\001'))
_TENANT.fields_by_name['created_by'].has_options = True
_TENANT.fields_by_name['created_by']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026Creator of this tenant'))
_TENANT.has_options = True
_TENANT._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\262\246\035\013TenantCheck\302\246\035\rTenantDefault\370\227\"\001'))
_IPADDRRANGE.fields_by_name['begin'].has_options = True
_IPADDRRANGE.fields_by_name['begin']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035 Starting IP address of the range'))
_IPADDRRANGE.fields_by_name['end'].has_options = True
_IPADDRRANGE.fields_by_name['end']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\036Ending IP address of the range'))
_IPADDRRANGE.has_options = True
_IPADDRRANGE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\232\246\035\tbegin,end'))
_HTTPLOCALFILE.fields_by_name['content_type'].has_options = True
_HTTPLOCALFILE.fields_by_name['content_type']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Mime-type of the content in the file.'))
_HTTPLOCALFILE.fields_by_name['file_content'].has_options = True
_HTTPLOCALFILE.fields_by_name['file_content']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0355File content to used in the local HTTP response body.\300\247\035\001'))
_TIMESTAMP.has_options = True
_TIMESTAMP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\212\246\035\tTimeStamp'))
_OPERATIONALSTATUS.has_options = True
_OPERATIONALSTATUS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\212\246\035\022Operational Status'))
_CONFIGURATIONSTATUS.has_options = True
_CONFIGURATIONSTATUS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\212\246\035\024Configuration Status'))
_IPADDRPORT.fields_by_name['ip'].has_options = True
_IPADDRPORT.fields_by_name['ip']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035?IP Address of host. One of IP address or hostname should be set'))
_IPADDRPORT.fields_by_name['port'].has_options = True
_IPADDRPORT.fields_by_name['port']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\025Port number of server\262\246\035\0071-65535'))
_IPADDRPORT.fields_by_name['hostname'].has_options = True
_IPADDRPORT.fields_by_name['hostname']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035?Hostname of server. One of IP address or hostname should be set'))
_GCPINFO.fields_by_name['project'].has_options = True
_GCPINFO.fields_by_name['project']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\032Project this SE belongs to\360\247\035\001'))
_GCPINFO.fields_by_name['zone'].has_options = True
_GCPINFO.fields_by_name['zone']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Zone this SE is part of\360\247\035\001'))
_GCPINFO.fields_by_name['network'].has_options = True
_GCPINFO.fields_by_name['network']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\033Network this SE is assigned\360\247\035\001'))
_GCPINFO.fields_by_name['subnet'].has_options = True
_GCPINFO.fields_by_name['subnet']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\032Subnet assigned to this SE\360\247\035\001'))
_GCPINFO.fields_by_name['hostname'].has_options = True
_GCPINFO.fields_by_name['hostname']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\023Hostname of this SE\360\247\035\001'))
_NSXSGINFO.fields_by_name['name'].has_options = True
_NSXSGINFO.fields_by_name['name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.1.1\242\246\035&Name of the NSX Manager Security Group'))
_NSXSGINFO.fields_by_name['object_id'].has_options = True
_NSXSGINFO.fields_by_name['object_id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.1.1\242\246\035*NSX Manager objectId of the Security Group'))
_GEOLOCATION.fields_by_name['latitude'].has_options = True
_GEOLOCATION.fields_by_name['latitude']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.1.1\222\210\'\004full\242\246\035sLatitude of the location. This is represented as degrees.minutes. The range is from -90.0 (south) to +90.0 (north).\262\246\035\013-90.0-+90.0'))
_GEOLOCATION.fields_by_name['longitude'].has_options = True
_GEOLOCATION.fields_by_name['longitude']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.1.1\222\210\'\004full\242\246\035tLongitude of the location. This is represented as degrees.minutes. The range is from -180.0 (west) to +180.0 (east).\262\246\035\r-180.0-+180.0'))
_GEOLOCATION.fields_by_name['name'].has_options = True
_GEOLOCATION.fields_by_name['name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\350\246\035\200\001\222\210\'\004full\212\210\'\014alphabetical\352\247\035\00617.1.1\242\246\035/Location name in the format Country/State/City.'))
_GEOLOCATION.fields_by_name['tag'].has_options = True
_GEOLOCATION.fields_by_name['tag']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\350\246\035 \222\210\'\004full\212\210\'\014alphabetical\352\247\035\00617.1.1\242\246\035&Location tag string - example: USEast.'))
_PROPERTY.fields_by_name['name'].has_options = True
_PROPERTY.fields_by_name['name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\016Property name.\352\247\035\00617.2.1'))
_PROPERTY.fields_by_name['value'].has_options = True
_PROPERTY.fields_by_name['value']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\017Property value.\352\247\035\00617.2.1'))
_PROPERTY.has_options = True
_PROPERTY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\232\246\035\004name'))
_PLACEMENTNETWORK.fields_by_name['network_uuid'].has_options = True
_PLACEMENTNETWORK.fields_by_name['network_uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\202\247\035\007Network'))
_SENETWORKSUBNET.fields_by_name['network_uuid'].has_options = True
_SENETWORKSUBNET.fields_by_name['network_uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\252\247\035\007Network\352\247\035\00617.2.4'))
_SENETWORKSUBNET.fields_by_name['subnet'].has_options = True
_SENETWORKSUBNET.fields_by_name['subnet']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\352\247\035\00617.2.4'))
# @@protoc_insertion_point(module_scope)
