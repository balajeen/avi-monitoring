# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: match.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import common_pb2 as common__pb2
import options_pb2 as options__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='match.proto',
  package='',
  syntax='proto2',
  serialized_pb=_b('\n\x0bmatch.proto\x1a\x0c\x63ommon.proto\x1a\roptions.proto\"\xa6\x07\n\x0bIpAddrGroup\x12.\n\x04uuid\x18\x01 \x02(\tB \xa2\xa6\x1d\x1cUUID of the IP address group\x12.\n\x04name\x18\x02 \x02(\tB \xa2\xa6\x1d\x1cName of the IP address group\x12\x38\n\x05\x61\x64\x64rs\x18\x03 \x03(\x0b\x32\x07.IpAddrB \xa2\xa6\x1d\x18\x43onfigure IP address(es)\xd0\xa7\x1d\x01\x12?\n\x06ranges\x18\x04 \x03(\x0b\x32\x0c.IpAddrRangeB!\xa2\xa6\x1d\x1d\x43onfigure IP address range(s)\x12\x44\n\x08prefixes\x18\x05 \x03(\x0b\x32\r.IpAddrPrefixB#\xa2\xa6\x1d\x1f\x43onfigure IP address prefix(es)\x12`\n\rcountry_codes\x18\x06 \x03(\tBI\xa2\xa6\x1d\x45Populate the IP address ranges from the geo database for this country\x12T\n\rapic_epg_name\x18\x07 \x01(\tB=\xa2\xa6\x1d\x39Populate IP addresses from members of this Cisco APIC EPG\x12H\n\x08ip_ports\x18\x08 \x03(\x0b\x32\x0b.IpAddrPortB)\xa2\xa6\x1d%Configure (IP address, port) tuple(s)\x12T\n\x11marathon_app_name\x18\t \x01(\tB9\xa2\xa6\x1d\x35Populate IP addresses from tasks of this Marathon app\x12\xb5\x01\n\x15marathon_service_port\x18\n \x01(\rB\x95\x01\xa2\xa6\x1d\x90\x01Task port associated with marathon service port. If Marathon app has multiple service ports, this is required. Else, the first task port is used\x12\x13\n\x0b\x64\x65scription\x18\x63 \x01(\t\x12\x1f\n\x0btenant_uuid\x18\x64 \x02(\tB\n\x9a\xa6\x1d\x06Tenant:0\xb2\xa6\x1d\x10IpAddrGroupCheck\xba\xa6\x1d\x14IpAddrGroupTransform\x90\x97\"\x01\"C\n\x08KeyValue\x12\x14\n\x03key\x18\x01 \x02(\tB\x07\xa2\xa6\x1d\x03Key\x12\x18\n\x05value\x18\x02 \x01(\tB\t\xa2\xa6\x1d\x05Value:\x07\x9a\xa6\x1d\x03key\"\xbf\x02\n\x0bStringGroup\x12*\n\x04uuid\x18\x01 \x02(\tB\x1c\xa2\xa6\x1d\x18UUID of the string group\x12*\n\x04name\x18\x02 \x02(\tB\x1c\xa2\xa6\x1d\x18Name of the string group\x12\x42\n\x02kv\x18\x04 \x03(\x0b\x32\t.KeyValueB+\xa2\xa6\x1d\'Configure Key:Value in the string group\x12H\n\x04type\x18\x05 \x02(\x0e\x32\x10.StringGroupType:\x0eSG_TYPE_STRINGB\x18\xa2\xa6\x1d\x14Type of StringGroup.\x12\x13\n\x0b\x64\x65scription\x18\x63 \x01(\t\x12\x1f\n\x0btenant_uuid\x18\x64 \x02(\tB\n\x9a\xa6\x1d\x06Tenant:\x14\xb2\xa6\x1d\x10StringGroupCheck\"\xd9\x02\n\x0bIpAddrMatch\x12\x66\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x0f.MatchOperationB=\xa2\xa6\x1d\x39\x43riterion to use for IP address matching the HTTP request\x12*\n\x05\x61\x64\x64rs\x18\x02 \x03(\x0b\x32\x07.IpAddrB\x12\xa2\xa6\x1d\x0eIP address(es)\x12\x35\n\x06ranges\x18\x03 \x03(\x0b\x32\x0c.IpAddrRangeB\x17\xa2\xa6\x1d\x13IP address range(s)\x12:\n\x08prefixes\x18\x04 \x03(\x0b\x32\r.IpAddrPrefixB\x19\xa2\xa6\x1d\x15IP address prefix(es)\x12\x43\n\x0bgroup_uuids\x18\x05 \x03(\tB.\x8a\xa6\x1d\x0bIpAddrGroup\xa2\xa6\x1d\x1bUUID of IP address group(s)\"\xa6\x01\n\tPortMatch\x12`\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x0f.MatchOperationB7\xa2\xa6\x1d\x33\x43riterion to use for port matching the HTTP request\x12\x37\n\x05ports\x18\x02 \x03(\rB(\xc0\xa6\x1d\x01\xa2\xa6\x1d\x15Listening TCP port(s)\xb2\xa6\x1d\x07\x31-65535\"\xb3\x01\n\rProtocolMatch\x12\x64\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x0f.MatchOperationB;\xa2\xa6\x1d\x37\x43riterion to use for protocol matching the HTTP request\x12<\n\tprotocols\x18\x02 \x02(\x0e\x32\r.HTTPProtocolB\x1a\xa2\xa6\x1d\x16HTTP or HTTPS protocol\"\xc4\x01\n\x0bMethodMatch\x12u\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x0f.MatchOperationBL\xa2\xa6\x1dHCriterion to use for HTTP method matching the method in the HTTP request\x12>\n\x07methods\x18\x02 \x03(\x0e\x32\x0b.HTTPMethodB \xc0\xa6\x1d\x01\xa2\xa6\x1d\x18\x43onfigure HTTP method(s)\"\xcf\x01\n\x10HTTPVersionMatch\x12|\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x0f.MatchOperationBS\xa2\xa6\x1dOCriterion to use for HTTP version matching the version used in the HTTP request\x12=\n\x08versions\x18\x02 \x03(\x0e\x32\x0c.HTTPVersionB\x1d\xc0\xa6\x1d\x01\xa2\xa6\x1d\x15HTTP protocol version\"\xea\x01\n\x0bStringMatch\x12\x63\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x10.StringOperationB9\xa2\xa6\x1d\x35\x43riterion to use for string matching the HTTP request\x12*\n\tmatch_str\x18\x02 \x03(\tB\x17\xa2\xa6\x1d\x0fString value(s)\xc0\xa7\x1d\x01\x12J\n\x12string_group_uuids\x18\x03 \x03(\tB.\x8a\xa6\x1d\x0bStringGroup\xa2\xa6\x1d\x1bUUID of the string group(s)\"\xca\x02\n\tPathMatch\x12l\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x10.StringOperationBB\xa2\xa6\x1d>Criterion to use for matching the path in the HTTP request URI\x12Y\n\nmatch_case\x18\x02 \x01(\x0e\x32\n.MatchCase:\x0bINSENSITIVEB,\xa2\xa6\x1d(Case sensitivity to use for the matching\x12(\n\tmatch_str\x18\x03 \x03(\tB\x15\xa2\xa6\x1d\rString values\xc0\xa7\x1d\x01\x12J\n\x12string_group_uuids\x18\x04 \x03(\tB.\x8a\xa6\x1d\x0bStringGroup\xa2\xa6\x1d\x1bUUID of the string group(s)\"\xcb\x02\n\nQueryMatch\x12m\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x14.QueryMatchOperationB?\xa2\xa6\x1d;Criterion to use for matching the query in HTTP request URI\x12V\n\nmatch_case\x18\x02 \x01(\x0e\x32\n.MatchCase:\x0bINSENSITIVEB)\xa2\xa6\x1d%Case sensitivity to use for the match\x12*\n\tmatch_str\x18\x03 \x03(\tB\x17\xa2\xa6\x1d\x0fString value(s)\xc0\xa7\x1d\x01\x12J\n\x12string_group_uuids\x18\x04 \x03(\tB.\x8a\xa6\x1d\x0bStringGroup\xa2\xa6\x1d\x1bUUID of the string group(s)\"\xe8\x02\n\x08HdrMatch\x12i\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x12.HdrMatchOperationB=\xa2\xa6\x1d\x39\x43riterion to use for matching headers in the HTTP request\x12\x45\n\x03hdr\x18\x02 \x02(\tB8\xa2\xa6\x1d\x34Name of the HTTP header whose value is to be matched\x12V\n\nmatch_case\x18\x03 \x01(\x0e\x32\n.MatchCase:\x0bINSENSITIVEB)\xa2\xa6\x1d%Case sensitivity to use for the match\x12@\n\x05value\x18\x04 \x03(\tB1\xa2\xa6\x1d)String values to match in the HTTP header\xc0\xa7\x1d\x01:\x10\xc2\xa6\x1d\x0cMatchDefault\"\xbe\x02\n\x0b\x43ookieMatch\x12l\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x12.HdrMatchOperationB@\xa2\xa6\x1d<Criterion to use for matching the cookie in the HTTP request\x12$\n\x04name\x18\x02 \x02(\tB\x16\xa2\xa6\x1d\x12Name of the cookie\x12V\n\nmatch_case\x18\x03 \x01(\x0e\x32\n.MatchCase:\x0bINSENSITIVEB)\xa2\xa6\x1d%Case sensitivity to use for the match\x12\x31\n\x05value\x18\x04 \x01(\tB\"\xa2\xa6\x1d\x1aString value in the cookie\xc0\xa7\x1d\x01:\x10\xc2\xa6\x1d\x0cMatchDefault\"\x95\x02\n\x0cHostHdrMatch\x12`\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x12.HdrMatchOperationB4\xa2\xa6\x1d\x30\x43riterion to use for the host header value match\x12V\n\nmatch_case\x18\x02 \x01(\x0e\x32\n.MatchCase:\x0bINSENSITIVEB)\xa2\xa6\x1d%Case sensitivity to use for the match\x12\x39\n\x05value\x18\x03 \x03(\tB*\xa2\xa6\x1d\"String value(s) in the host header\xc0\xa7\x1d\x01:\x10\xc2\xa6\x1d\x0cMatchDefault\"\xb5\x02\n\x10LocationHdrMatch\x12x\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x12.HdrMatchOperationBL\xa2\xa6\x1dHCriterion to use for matching location header value in the HTTP response\x12V\n\nmatch_case\x18\x02 \x01(\x0e\x32\n.MatchCase:\x0bINSENSITIVEB)\xa2\xa6\x1d%Case sensitivity to use for the match\x12=\n\x05value\x18\x03 \x03(\tB.\xa2\xa6\x1d&String value(s) in the location header\xc0\xa7\x1d\x01:\x10\xc2\xa6\x1d\x0cMatchDefault\"{\n\x0fHTTPStatusRange\x12\x35\n\x05\x62\x65gin\x18\x01 \x02(\x05\x42&\xa2\xa6\x1d\"Starting HTTP response status code\x12\x31\n\x03\x65nd\x18\x02 \x02(\x05\x42$\xa2\xa6\x1d Ending HTTP response status code\"\x80\x02\n\x0fHTTPStatusMatch\x12k\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x0f.MatchOperationBB\xa2\xa6\x1d>Criterion to use for matching the HTTP response status code(s)\x12\x36\n\x0cstatus_codes\x18\x02 \x03(\x05\x42 \xa2\xa6\x1d\x1cHTTP response status code(s)\x12H\n\x06ranges\x18\x03 \x03(\x0b\x32\x10.HTTPStatusRangeB&\xa2\xa6\x1d\"HTTP response status code range(s)\"\x8c\x05\n\x0bMatchTarget\x12\x42\n\tclient_ip\x18\x01 \x01(\x0b\x32\x0c.IpAddrMatchB!\xa2\xa6\x1d\x1d\x43onfigure client ip addresses\x12@\n\x07vs_port\x18\x02 \x01(\x0b\x32\n.PortMatchB#\xa2\xa6\x1d\x1f\x43onfigure virtual service ports\x12I\n\x08protocol\x18\x03 \x01(\x0b\x32\x0e.ProtocolMatchB\'\xa2\xa6\x1d#Configure the type of HTTP protocol\x12\x38\n\x06method\x18\x04 \x01(\x0b\x32\x0c.MethodMatchB\x1a\xa2\xa6\x1d\x16\x43onfigure HTTP methods\x12O\n\x07version\x18\x05 \x01(\x0b\x32\x11.HTTPVersionMatchB+\xa2\xa6\x1d\'Configure versions of the HTTP protocol\x12\x35\n\x04path\x18\x07 \x01(\x0b\x32\n.PathMatchB\x1b\xa2\xa6\x1d\x17\x43onfigure request paths\x12\x37\n\x05query\x18\x08 \x01(\x0b\x32\x0b.QueryMatchB\x1b\xa2\xa6\x1d\x17\x43onfigure request query\x12\x35\n\x04hdrs\x18\t \x03(\x0b\x32\t.HdrMatchB\x1c\xa2\xa6\x1d\x18\x43onfigure HTTP header(s)\x12:\n\x06\x63ookie\x18\n \x01(\x0b\x32\x0c.CookieMatchB\x1c\xa2\xa6\x1d\x18\x43onfigure HTTP cookie(s)\x12>\n\x08host_hdr\x18\x0b \x01(\x0b\x32\r.HostHdrMatchB\x1d\xa2\xa6\x1d\x19\x43onfigure the host header\"\xeb\x06\n\x13ResponseMatchTarget\x12\x42\n\tclient_ip\x18\x01 \x01(\x0b\x32\x0c.IpAddrMatchB!\xa2\xa6\x1d\x1d\x43onfigure client ip addresses\x12@\n\x07vs_port\x18\x02 \x01(\x0b\x32\n.PortMatchB#\xa2\xa6\x1d\x1f\x43onfigure virtual service ports\x12I\n\x08protocol\x18\x03 \x01(\x0b\x32\x0e.ProtocolMatchB\'\xa2\xa6\x1d#Configure the type of HTTP protocol\x12\x38\n\x06method\x18\x04 \x01(\x0b\x32\x0c.MethodMatchB\x1a\xa2\xa6\x1d\x16\x43onfigure HTTP methods\x12O\n\x07version\x18\x05 \x01(\x0b\x32\x11.HTTPVersionMatchB+\xa2\xa6\x1d\'Configure versions of the HTTP protocol\x12\x35\n\x04path\x18\x07 \x01(\x0b\x32\n.PathMatchB\x1b\xa2\xa6\x1d\x17\x43onfigure request paths\x12\x37\n\x05query\x18\x08 \x01(\x0b\x32\x0b.QueryMatchB\x1b\xa2\xa6\x1d\x17\x43onfigure request query\x12\x33\n\x04hdrs\x18\t \x03(\x0b\x32\t.HdrMatchB\x1a\xa2\xa6\x1d\x16\x43onfigure HTTP headers\x12:\n\x06\x63ookie\x18\n \x01(\x0b\x32\x0c.CookieMatchB\x1c\xa2\xa6\x1d\x18\x43onfigure HTTP cookie(s)\x12>\n\x08host_hdr\x18\x0b \x01(\x0b\x32\r.HostHdrMatchB\x1d\xa2\xa6\x1d\x19\x43onfigure the host header\x12\x45\n\x07loc_hdr\x18\x0c \x01(\x0b\x32\x11.LocationHdrMatchB!\xa2\xa6\x1d\x1d\x43onfigure the location header\x12G\n\x06status\x18\r \x01(\x0b\x32\x10.HTTPStatusMatchB%\xa2\xa6\x1d!Configure the HTTP status code(s)\x12G\n\x08rsp_hdrs\x18\x0e \x03(\x0b\x32\t.HdrMatchB*\xa2\xa6\x1d&Configure the HTTP headers in response\"\xa0\x02\n\x11MicroServiceGroup\x12\x30\n\x04uuid\x18\x01 \x02(\tB\"\xa2\xa6\x1d\x1eUUID of the MicroService group\x12\x30\n\x04name\x18\x02 \x02(\tB\"\xa2\xa6\x1d\x1eName of the MicroService group\x12\x45\n\rservice_uuids\x18\x03 \x03(\tB.\x8a\xa6\x1d\x0cMicroService\xa2\xa6\x1d\x1a\x43onfigure MicroService(es)\x12$\n\ncreated_by\x18\x04 \x01(\tB\x10\xa2\xa6\x1d\x0c\x43reator name\x12\x13\n\x0b\x64\x65scription\x18\x63 \x01(\t\x12\x1f\n\x0btenant_uuid\x18\x64 \x02(\tB\n\x9a\xa6\x1d\x06Tenant:\x04\x90\x97\"\x01\"\xcf\x01\n\x11MicroServiceMatch\x12i\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x0f.MatchOperationB@\xa2\xa6\x1d<Criterion to use for Micro Service matching the HTTP request\x12O\n\ngroup_uuid\x18\x02 \x01(\tB;\x8a\xa6\x1d\x11MicroServiceGroup\xd8\xa7\x1d\x01\xa2\xa6\x1d\x1eUUID of Micro Service group(s)\"\x92\x01\n\x0b\x41ppTagMatch\x12@\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x10.StringOperationB\x16\xa2\xa6\x1d\x12Match the tag name\x12\x41\n\x03tag\x18\x02 \x01(\tB4\xa2\xa6\x1d\x30Tag name or reserved keywords: AllTags/MyTagApps\"\xe9\x01\n\x0e\x41ppTenantMatch\x12\x43\n\x0ematch_criteria\x18\x01 \x02(\x0e\x32\x10.StringOperationB\x19\xa2\xa6\x1d\x15Match the tenant UUID\x12,\n\x0btenant_name\x18\x02 \x01(\tB\x17\xa2\xa6\x1d\x13Name of the tenant \x12\x64\n\x0btenant_uuid\x18\x03 \x01(\tBO\xa2\xa6\x1dKTenant UUID or reserved keywords: AllTenants/MyTenantApps/MyTenantInstances*\x9b\x01\n\x0fStringGroupType\x12>\n\x0eSG_TYPE_STRING\x10\x01\x1a*\x8a\x97\"&StringGroup is a collection of Strings\x12H\n\x0eSG_TYPE_KEYVAL\x10\x02\x1a\x34\x8a\x97\"0StringGroup is a collection of (Key,Value) pairsB\x1d\n\x18\x63om.avinetworks.protobuf\x88\x01\x01')
  ,
  dependencies=[common__pb2.DESCRIPTOR,options__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_STRINGGROUPTYPE = _descriptor.EnumDescriptor(
  name='StringGroupType',
  full_name='StringGroupType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SG_TYPE_STRING', index=0, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"&StringGroup is a collection of Strings')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SG_TYPE_KEYVAL', index=1, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"0StringGroup is a collection of (Key,Value) pairs')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=7464,
  serialized_end=7619,
)
_sym_db.RegisterEnumDescriptor(_STRINGGROUPTYPE)

StringGroupType = enum_type_wrapper.EnumTypeWrapper(_STRINGGROUPTYPE)
SG_TYPE_STRING = 1
SG_TYPE_KEYVAL = 2



_IPADDRGROUP = _descriptor.Descriptor(
  name='IpAddrGroup',
  full_name='IpAddrGroup',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuid', full_name='IpAddrGroup.uuid', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\034UUID of the IP address group'))),
    _descriptor.FieldDescriptor(
      name='name', full_name='IpAddrGroup.name', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\034Name of the IP address group'))),
    _descriptor.FieldDescriptor(
      name='addrs', full_name='IpAddrGroup.addrs', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Configure IP address(es)\320\247\035\001'))),
    _descriptor.FieldDescriptor(
      name='ranges', full_name='IpAddrGroup.ranges', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\035Configure IP address range(s)'))),
    _descriptor.FieldDescriptor(
      name='prefixes', full_name='IpAddrGroup.prefixes', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\037Configure IP address prefix(es)'))),
    _descriptor.FieldDescriptor(
      name='country_codes', full_name='IpAddrGroup.country_codes', index=5,
      number=6, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035EPopulate the IP address ranges from the geo database for this country'))),
    _descriptor.FieldDescriptor(
      name='apic_epg_name', full_name='IpAddrGroup.apic_epg_name', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0359Populate IP addresses from members of this Cisco APIC EPG'))),
    _descriptor.FieldDescriptor(
      name='ip_ports', full_name='IpAddrGroup.ip_ports', index=7,
      number=8, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Configure (IP address, port) tuple(s)'))),
    _descriptor.FieldDescriptor(
      name='marathon_app_name', full_name='IpAddrGroup.marathon_app_name', index=8,
      number=9, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0355Populate IP addresses from tasks of this Marathon app'))),
    _descriptor.FieldDescriptor(
      name='marathon_service_port', full_name='IpAddrGroup.marathon_service_port', index=9,
      number=10, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\220\001Task port associated with marathon service port. If Marathon app has multiple service ports, this is required. Else, the first task port is used'))),
    _descriptor.FieldDescriptor(
      name='description', full_name='IpAddrGroup.description', index=10,
      number=99, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tenant_uuid', full_name='IpAddrGroup.tenant_uuid', index=11,
      number=100, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\232\246\035\006Tenant'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\262\246\035\020IpAddrGroupCheck\272\246\035\024IpAddrGroupTransform\220\227\"\001')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=45,
  serialized_end=979,
)


_KEYVALUE = _descriptor.Descriptor(
  name='KeyValue',
  full_name='KeyValue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='KeyValue.key', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\003Key'))),
    _descriptor.FieldDescriptor(
      name='value', full_name='KeyValue.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\005Value'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\232\246\035\003key')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=981,
  serialized_end=1048,
)


_STRINGGROUP = _descriptor.Descriptor(
  name='StringGroup',
  full_name='StringGroup',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuid', full_name='StringGroup.uuid', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030UUID of the string group'))),
    _descriptor.FieldDescriptor(
      name='name', full_name='StringGroup.name', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Name of the string group'))),
    _descriptor.FieldDescriptor(
      name='kv', full_name='StringGroup.kv', index=2,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\'Configure Key:Value in the string group'))),
    _descriptor.FieldDescriptor(
      name='type', full_name='StringGroup.type', index=3,
      number=5, type=14, cpp_type=8, label=2,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\024Type of StringGroup.'))),
    _descriptor.FieldDescriptor(
      name='description', full_name='StringGroup.description', index=4,
      number=99, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tenant_uuid', full_name='StringGroup.tenant_uuid', index=5,
      number=100, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\232\246\035\006Tenant'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\262\246\035\020StringGroupCheck')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1051,
  serialized_end=1370,
)


_IPADDRMATCH = _descriptor.Descriptor(
  name='IpAddrMatch',
  full_name='IpAddrMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='IpAddrMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0359Criterion to use for IP address matching the HTTP request'))),
    _descriptor.FieldDescriptor(
      name='addrs', full_name='IpAddrMatch.addrs', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\016IP address(es)'))),
    _descriptor.FieldDescriptor(
      name='ranges', full_name='IpAddrMatch.ranges', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\023IP address range(s)'))),
    _descriptor.FieldDescriptor(
      name='prefixes', full_name='IpAddrMatch.prefixes', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\025IP address prefix(es)'))),
    _descriptor.FieldDescriptor(
      name='group_uuids', full_name='IpAddrMatch.group_uuids', index=4,
      number=5, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\013IpAddrGroup\242\246\035\033UUID of IP address group(s)'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1373,
  serialized_end=1718,
)


_PORTMATCH = _descriptor.Descriptor(
  name='PortMatch',
  full_name='PortMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='PortMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0353Criterion to use for port matching the HTTP request'))),
    _descriptor.FieldDescriptor(
      name='ports', full_name='PortMatch.ports', index=1,
      number=2, type=13, cpp_type=3, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\300\246\035\001\242\246\035\025Listening TCP port(s)\262\246\035\0071-65535'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1721,
  serialized_end=1887,
)


_PROTOCOLMATCH = _descriptor.Descriptor(
  name='ProtocolMatch',
  full_name='ProtocolMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='ProtocolMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0357Criterion to use for protocol matching the HTTP request'))),
    _descriptor.FieldDescriptor(
      name='protocols', full_name='ProtocolMatch.protocols', index=1,
      number=2, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026HTTP or HTTPS protocol'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1890,
  serialized_end=2069,
)


_METHODMATCH = _descriptor.Descriptor(
  name='MethodMatch',
  full_name='MethodMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='MethodMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035HCriterion to use for HTTP method matching the method in the HTTP request'))),
    _descriptor.FieldDescriptor(
      name='methods', full_name='MethodMatch.methods', index=1,
      number=2, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\300\246\035\001\242\246\035\030Configure HTTP method(s)'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2072,
  serialized_end=2268,
)


_HTTPVERSIONMATCH = _descriptor.Descriptor(
  name='HTTPVersionMatch',
  full_name='HTTPVersionMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='HTTPVersionMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035OCriterion to use for HTTP version matching the version used in the HTTP request'))),
    _descriptor.FieldDescriptor(
      name='versions', full_name='HTTPVersionMatch.versions', index=1,
      number=2, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\300\246\035\001\242\246\035\025HTTP protocol version'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2271,
  serialized_end=2478,
)


_STRINGMATCH = _descriptor.Descriptor(
  name='StringMatch',
  full_name='StringMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='StringMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0355Criterion to use for string matching the HTTP request'))),
    _descriptor.FieldDescriptor(
      name='match_str', full_name='StringMatch.match_str', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\017String value(s)\300\247\035\001'))),
    _descriptor.FieldDescriptor(
      name='string_group_uuids', full_name='StringMatch.string_group_uuids', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\013StringGroup\242\246\035\033UUID of the string group(s)'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2481,
  serialized_end=2715,
)


_PATHMATCH = _descriptor.Descriptor(
  name='PathMatch',
  full_name='PathMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='PathMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035>Criterion to use for matching the path in the HTTP request URI'))),
    _descriptor.FieldDescriptor(
      name='match_case', full_name='PathMatch.match_case', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035(Case sensitivity to use for the matching'))),
    _descriptor.FieldDescriptor(
      name='match_str', full_name='PathMatch.match_str', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\rString values\300\247\035\001'))),
    _descriptor.FieldDescriptor(
      name='string_group_uuids', full_name='PathMatch.string_group_uuids', index=3,
      number=4, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\013StringGroup\242\246\035\033UUID of the string group(s)'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2718,
  serialized_end=3048,
)


_QUERYMATCH = _descriptor.Descriptor(
  name='QueryMatch',
  full_name='QueryMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='QueryMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035;Criterion to use for matching the query in HTTP request URI'))),
    _descriptor.FieldDescriptor(
      name='match_case', full_name='QueryMatch.match_case', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))),
    _descriptor.FieldDescriptor(
      name='match_str', full_name='QueryMatch.match_str', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\017String value(s)\300\247\035\001'))),
    _descriptor.FieldDescriptor(
      name='string_group_uuids', full_name='QueryMatch.string_group_uuids', index=3,
      number=4, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\013StringGroup\242\246\035\033UUID of the string group(s)'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3051,
  serialized_end=3382,
)


_HDRMATCH = _descriptor.Descriptor(
  name='HdrMatch',
  full_name='HdrMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='HdrMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0359Criterion to use for matching headers in the HTTP request'))),
    _descriptor.FieldDescriptor(
      name='hdr', full_name='HdrMatch.hdr', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0354Name of the HTTP header whose value is to be matched'))),
    _descriptor.FieldDescriptor(
      name='match_case', full_name='HdrMatch.match_case', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))),
    _descriptor.FieldDescriptor(
      name='value', full_name='HdrMatch.value', index=3,
      number=4, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035)String values to match in the HTTP header\300\247\035\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\302\246\035\014MatchDefault')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3385,
  serialized_end=3745,
)


_COOKIEMATCH = _descriptor.Descriptor(
  name='CookieMatch',
  full_name='CookieMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='CookieMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035<Criterion to use for matching the cookie in the HTTP request'))),
    _descriptor.FieldDescriptor(
      name='name', full_name='CookieMatch.name', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\022Name of the cookie'))),
    _descriptor.FieldDescriptor(
      name='match_case', full_name='CookieMatch.match_case', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))),
    _descriptor.FieldDescriptor(
      name='value', full_name='CookieMatch.value', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\032String value in the cookie\300\247\035\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\302\246\035\014MatchDefault')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3748,
  serialized_end=4066,
)


_HOSTHDRMATCH = _descriptor.Descriptor(
  name='HostHdrMatch',
  full_name='HostHdrMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='HostHdrMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0350Criterion to use for the host header value match'))),
    _descriptor.FieldDescriptor(
      name='match_case', full_name='HostHdrMatch.match_case', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))),
    _descriptor.FieldDescriptor(
      name='value', full_name='HostHdrMatch.value', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\"String value(s) in the host header\300\247\035\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\302\246\035\014MatchDefault')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4069,
  serialized_end=4346,
)


_LOCATIONHDRMATCH = _descriptor.Descriptor(
  name='LocationHdrMatch',
  full_name='LocationHdrMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='LocationHdrMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035HCriterion to use for matching location header value in the HTTP response'))),
    _descriptor.FieldDescriptor(
      name='match_case', full_name='LocationHdrMatch.match_case', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))),
    _descriptor.FieldDescriptor(
      name='value', full_name='LocationHdrMatch.value', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035&String value(s) in the location header\300\247\035\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\302\246\035\014MatchDefault')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4349,
  serialized_end=4658,
)


_HTTPSTATUSRANGE = _descriptor.Descriptor(
  name='HTTPStatusRange',
  full_name='HTTPStatusRange',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='begin', full_name='HTTPStatusRange.begin', index=0,
      number=1, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\"Starting HTTP response status code'))),
    _descriptor.FieldDescriptor(
      name='end', full_name='HTTPStatusRange.end', index=1,
      number=2, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035 Ending HTTP response status code'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4660,
  serialized_end=4783,
)


_HTTPSTATUSMATCH = _descriptor.Descriptor(
  name='HTTPStatusMatch',
  full_name='HTTPStatusMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='HTTPStatusMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035>Criterion to use for matching the HTTP response status code(s)'))),
    _descriptor.FieldDescriptor(
      name='status_codes', full_name='HTTPStatusMatch.status_codes', index=1,
      number=2, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\034HTTP response status code(s)'))),
    _descriptor.FieldDescriptor(
      name='ranges', full_name='HTTPStatusMatch.ranges', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\"HTTP response status code range(s)'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4786,
  serialized_end=5042,
)


_MATCHTARGET = _descriptor.Descriptor(
  name='MatchTarget',
  full_name='MatchTarget',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='client_ip', full_name='MatchTarget.client_ip', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\035Configure client ip addresses'))),
    _descriptor.FieldDescriptor(
      name='vs_port', full_name='MatchTarget.vs_port', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\037Configure virtual service ports'))),
    _descriptor.FieldDescriptor(
      name='protocol', full_name='MatchTarget.protocol', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035#Configure the type of HTTP protocol'))),
    _descriptor.FieldDescriptor(
      name='method', full_name='MatchTarget.method', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026Configure HTTP methods'))),
    _descriptor.FieldDescriptor(
      name='version', full_name='MatchTarget.version', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\'Configure versions of the HTTP protocol'))),
    _descriptor.FieldDescriptor(
      name='path', full_name='MatchTarget.path', index=5,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Configure request paths'))),
    _descriptor.FieldDescriptor(
      name='query', full_name='MatchTarget.query', index=6,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Configure request query'))),
    _descriptor.FieldDescriptor(
      name='hdrs', full_name='MatchTarget.hdrs', index=7,
      number=9, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Configure HTTP header(s)'))),
    _descriptor.FieldDescriptor(
      name='cookie', full_name='MatchTarget.cookie', index=8,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Configure HTTP cookie(s)'))),
    _descriptor.FieldDescriptor(
      name='host_hdr', full_name='MatchTarget.host_hdr', index=9,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\031Configure the host header'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5045,
  serialized_end=5697,
)


_RESPONSEMATCHTARGET = _descriptor.Descriptor(
  name='ResponseMatchTarget',
  full_name='ResponseMatchTarget',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='client_ip', full_name='ResponseMatchTarget.client_ip', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\035Configure client ip addresses'))),
    _descriptor.FieldDescriptor(
      name='vs_port', full_name='ResponseMatchTarget.vs_port', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\037Configure virtual service ports'))),
    _descriptor.FieldDescriptor(
      name='protocol', full_name='ResponseMatchTarget.protocol', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035#Configure the type of HTTP protocol'))),
    _descriptor.FieldDescriptor(
      name='method', full_name='ResponseMatchTarget.method', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026Configure HTTP methods'))),
    _descriptor.FieldDescriptor(
      name='version', full_name='ResponseMatchTarget.version', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\'Configure versions of the HTTP protocol'))),
    _descriptor.FieldDescriptor(
      name='path', full_name='ResponseMatchTarget.path', index=5,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Configure request paths'))),
    _descriptor.FieldDescriptor(
      name='query', full_name='ResponseMatchTarget.query', index=6,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Configure request query'))),
    _descriptor.FieldDescriptor(
      name='hdrs', full_name='ResponseMatchTarget.hdrs', index=7,
      number=9, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026Configure HTTP headers'))),
    _descriptor.FieldDescriptor(
      name='cookie', full_name='ResponseMatchTarget.cookie', index=8,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Configure HTTP cookie(s)'))),
    _descriptor.FieldDescriptor(
      name='host_hdr', full_name='ResponseMatchTarget.host_hdr', index=9,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\031Configure the host header'))),
    _descriptor.FieldDescriptor(
      name='loc_hdr', full_name='ResponseMatchTarget.loc_hdr', index=10,
      number=12, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\035Configure the location header'))),
    _descriptor.FieldDescriptor(
      name='status', full_name='ResponseMatchTarget.status', index=11,
      number=13, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035!Configure the HTTP status code(s)'))),
    _descriptor.FieldDescriptor(
      name='rsp_hdrs', full_name='ResponseMatchTarget.rsp_hdrs', index=12,
      number=14, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035&Configure the HTTP headers in response'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5700,
  serialized_end=6575,
)


_MICROSERVICEGROUP = _descriptor.Descriptor(
  name='MicroServiceGroup',
  full_name='MicroServiceGroup',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuid', full_name='MicroServiceGroup.uuid', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\036UUID of the MicroService group'))),
    _descriptor.FieldDescriptor(
      name='name', full_name='MicroServiceGroup.name', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\036Name of the MicroService group'))),
    _descriptor.FieldDescriptor(
      name='service_uuids', full_name='MicroServiceGroup.service_uuids', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\014MicroService\242\246\035\032Configure MicroService(es)'))),
    _descriptor.FieldDescriptor(
      name='created_by', full_name='MicroServiceGroup.created_by', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\014Creator name'))),
    _descriptor.FieldDescriptor(
      name='description', full_name='MicroServiceGroup.description', index=4,
      number=99, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tenant_uuid', full_name='MicroServiceGroup.tenant_uuid', index=5,
      number=100, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\232\246\035\006Tenant'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\220\227\"\001')),
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6578,
  serialized_end=6866,
)


_MICROSERVICEMATCH = _descriptor.Descriptor(
  name='MicroServiceMatch',
  full_name='MicroServiceMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='MicroServiceMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035<Criterion to use for Micro Service matching the HTTP request'))),
    _descriptor.FieldDescriptor(
      name='group_uuid', full_name='MicroServiceMatch.group_uuid', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\021MicroServiceGroup\330\247\035\001\242\246\035\036UUID of Micro Service group(s)'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6869,
  serialized_end=7076,
)


_APPTAGMATCH = _descriptor.Descriptor(
  name='AppTagMatch',
  full_name='AppTagMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='AppTagMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\022Match the tag name'))),
    _descriptor.FieldDescriptor(
      name='tag', full_name='AppTagMatch.tag', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0350Tag name or reserved keywords: AllTags/MyTagApps'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=7079,
  serialized_end=7225,
)


_APPTENANTMATCH = _descriptor.Descriptor(
  name='AppTenantMatch',
  full_name='AppTenantMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_criteria', full_name='AppTenantMatch.match_criteria', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\025Match the tenant UUID'))),
    _descriptor.FieldDescriptor(
      name='tenant_name', full_name='AppTenantMatch.tenant_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\023Name of the tenant '))),
    _descriptor.FieldDescriptor(
      name='tenant_uuid', full_name='AppTenantMatch.tenant_uuid', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035KTenant UUID or reserved keywords: AllTenants/MyTenantApps/MyTenantInstances'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=7228,
  serialized_end=7461,
)

_IPADDRGROUP.fields_by_name['addrs'].message_type = options__pb2._IPADDR
_IPADDRGROUP.fields_by_name['ranges'].message_type = common__pb2._IPADDRRANGE
_IPADDRGROUP.fields_by_name['prefixes'].message_type = options__pb2._IPADDRPREFIX
_IPADDRGROUP.fields_by_name['ip_ports'].message_type = common__pb2._IPADDRPORT
_STRINGGROUP.fields_by_name['kv'].message_type = _KEYVALUE
_STRINGGROUP.fields_by_name['type'].enum_type = _STRINGGROUPTYPE
_IPADDRMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._MATCHOPERATION
_IPADDRMATCH.fields_by_name['addrs'].message_type = options__pb2._IPADDR
_IPADDRMATCH.fields_by_name['ranges'].message_type = common__pb2._IPADDRRANGE
_IPADDRMATCH.fields_by_name['prefixes'].message_type = options__pb2._IPADDRPREFIX
_PORTMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._MATCHOPERATION
_PROTOCOLMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._MATCHOPERATION
_PROTOCOLMATCH.fields_by_name['protocols'].enum_type = common__pb2._HTTPPROTOCOL
_METHODMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._MATCHOPERATION
_METHODMATCH.fields_by_name['methods'].enum_type = common__pb2._HTTPMETHOD
_HTTPVERSIONMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._MATCHOPERATION
_HTTPVERSIONMATCH.fields_by_name['versions'].enum_type = common__pb2._HTTPVERSION
_STRINGMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._STRINGOPERATION
_PATHMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._STRINGOPERATION
_PATHMATCH.fields_by_name['match_case'].enum_type = common__pb2._MATCHCASE
_QUERYMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._QUERYMATCHOPERATION
_QUERYMATCH.fields_by_name['match_case'].enum_type = common__pb2._MATCHCASE
_HDRMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._HDRMATCHOPERATION
_HDRMATCH.fields_by_name['match_case'].enum_type = common__pb2._MATCHCASE
_COOKIEMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._HDRMATCHOPERATION
_COOKIEMATCH.fields_by_name['match_case'].enum_type = common__pb2._MATCHCASE
_HOSTHDRMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._HDRMATCHOPERATION
_HOSTHDRMATCH.fields_by_name['match_case'].enum_type = common__pb2._MATCHCASE
_LOCATIONHDRMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._HDRMATCHOPERATION
_LOCATIONHDRMATCH.fields_by_name['match_case'].enum_type = common__pb2._MATCHCASE
_HTTPSTATUSMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._MATCHOPERATION
_HTTPSTATUSMATCH.fields_by_name['ranges'].message_type = _HTTPSTATUSRANGE
_MATCHTARGET.fields_by_name['client_ip'].message_type = _IPADDRMATCH
_MATCHTARGET.fields_by_name['vs_port'].message_type = _PORTMATCH
_MATCHTARGET.fields_by_name['protocol'].message_type = _PROTOCOLMATCH
_MATCHTARGET.fields_by_name['method'].message_type = _METHODMATCH
_MATCHTARGET.fields_by_name['version'].message_type = _HTTPVERSIONMATCH
_MATCHTARGET.fields_by_name['path'].message_type = _PATHMATCH
_MATCHTARGET.fields_by_name['query'].message_type = _QUERYMATCH
_MATCHTARGET.fields_by_name['hdrs'].message_type = _HDRMATCH
_MATCHTARGET.fields_by_name['cookie'].message_type = _COOKIEMATCH
_MATCHTARGET.fields_by_name['host_hdr'].message_type = _HOSTHDRMATCH
_RESPONSEMATCHTARGET.fields_by_name['client_ip'].message_type = _IPADDRMATCH
_RESPONSEMATCHTARGET.fields_by_name['vs_port'].message_type = _PORTMATCH
_RESPONSEMATCHTARGET.fields_by_name['protocol'].message_type = _PROTOCOLMATCH
_RESPONSEMATCHTARGET.fields_by_name['method'].message_type = _METHODMATCH
_RESPONSEMATCHTARGET.fields_by_name['version'].message_type = _HTTPVERSIONMATCH
_RESPONSEMATCHTARGET.fields_by_name['path'].message_type = _PATHMATCH
_RESPONSEMATCHTARGET.fields_by_name['query'].message_type = _QUERYMATCH
_RESPONSEMATCHTARGET.fields_by_name['hdrs'].message_type = _HDRMATCH
_RESPONSEMATCHTARGET.fields_by_name['cookie'].message_type = _COOKIEMATCH
_RESPONSEMATCHTARGET.fields_by_name['host_hdr'].message_type = _HOSTHDRMATCH
_RESPONSEMATCHTARGET.fields_by_name['loc_hdr'].message_type = _LOCATIONHDRMATCH
_RESPONSEMATCHTARGET.fields_by_name['status'].message_type = _HTTPSTATUSMATCH
_RESPONSEMATCHTARGET.fields_by_name['rsp_hdrs'].message_type = _HDRMATCH
_MICROSERVICEMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._MATCHOPERATION
_APPTAGMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._STRINGOPERATION
_APPTENANTMATCH.fields_by_name['match_criteria'].enum_type = common__pb2._STRINGOPERATION
DESCRIPTOR.message_types_by_name['IpAddrGroup'] = _IPADDRGROUP
DESCRIPTOR.message_types_by_name['KeyValue'] = _KEYVALUE
DESCRIPTOR.message_types_by_name['StringGroup'] = _STRINGGROUP
DESCRIPTOR.message_types_by_name['IpAddrMatch'] = _IPADDRMATCH
DESCRIPTOR.message_types_by_name['PortMatch'] = _PORTMATCH
DESCRIPTOR.message_types_by_name['ProtocolMatch'] = _PROTOCOLMATCH
DESCRIPTOR.message_types_by_name['MethodMatch'] = _METHODMATCH
DESCRIPTOR.message_types_by_name['HTTPVersionMatch'] = _HTTPVERSIONMATCH
DESCRIPTOR.message_types_by_name['StringMatch'] = _STRINGMATCH
DESCRIPTOR.message_types_by_name['PathMatch'] = _PATHMATCH
DESCRIPTOR.message_types_by_name['QueryMatch'] = _QUERYMATCH
DESCRIPTOR.message_types_by_name['HdrMatch'] = _HDRMATCH
DESCRIPTOR.message_types_by_name['CookieMatch'] = _COOKIEMATCH
DESCRIPTOR.message_types_by_name['HostHdrMatch'] = _HOSTHDRMATCH
DESCRIPTOR.message_types_by_name['LocationHdrMatch'] = _LOCATIONHDRMATCH
DESCRIPTOR.message_types_by_name['HTTPStatusRange'] = _HTTPSTATUSRANGE
DESCRIPTOR.message_types_by_name['HTTPStatusMatch'] = _HTTPSTATUSMATCH
DESCRIPTOR.message_types_by_name['MatchTarget'] = _MATCHTARGET
DESCRIPTOR.message_types_by_name['ResponseMatchTarget'] = _RESPONSEMATCHTARGET
DESCRIPTOR.message_types_by_name['MicroServiceGroup'] = _MICROSERVICEGROUP
DESCRIPTOR.message_types_by_name['MicroServiceMatch'] = _MICROSERVICEMATCH
DESCRIPTOR.message_types_by_name['AppTagMatch'] = _APPTAGMATCH
DESCRIPTOR.message_types_by_name['AppTenantMatch'] = _APPTENANTMATCH
DESCRIPTOR.enum_types_by_name['StringGroupType'] = _STRINGGROUPTYPE

IpAddrGroup = _reflection.GeneratedProtocolMessageType('IpAddrGroup', (_message.Message,), dict(
  DESCRIPTOR = _IPADDRGROUP,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:IpAddrGroup)
  ))
_sym_db.RegisterMessage(IpAddrGroup)

KeyValue = _reflection.GeneratedProtocolMessageType('KeyValue', (_message.Message,), dict(
  DESCRIPTOR = _KEYVALUE,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:KeyValue)
  ))
_sym_db.RegisterMessage(KeyValue)

StringGroup = _reflection.GeneratedProtocolMessageType('StringGroup', (_message.Message,), dict(
  DESCRIPTOR = _STRINGGROUP,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:StringGroup)
  ))
_sym_db.RegisterMessage(StringGroup)

IpAddrMatch = _reflection.GeneratedProtocolMessageType('IpAddrMatch', (_message.Message,), dict(
  DESCRIPTOR = _IPADDRMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:IpAddrMatch)
  ))
_sym_db.RegisterMessage(IpAddrMatch)

PortMatch = _reflection.GeneratedProtocolMessageType('PortMatch', (_message.Message,), dict(
  DESCRIPTOR = _PORTMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:PortMatch)
  ))
_sym_db.RegisterMessage(PortMatch)

ProtocolMatch = _reflection.GeneratedProtocolMessageType('ProtocolMatch', (_message.Message,), dict(
  DESCRIPTOR = _PROTOCOLMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:ProtocolMatch)
  ))
_sym_db.RegisterMessage(ProtocolMatch)

MethodMatch = _reflection.GeneratedProtocolMessageType('MethodMatch', (_message.Message,), dict(
  DESCRIPTOR = _METHODMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:MethodMatch)
  ))
_sym_db.RegisterMessage(MethodMatch)

HTTPVersionMatch = _reflection.GeneratedProtocolMessageType('HTTPVersionMatch', (_message.Message,), dict(
  DESCRIPTOR = _HTTPVERSIONMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:HTTPVersionMatch)
  ))
_sym_db.RegisterMessage(HTTPVersionMatch)

StringMatch = _reflection.GeneratedProtocolMessageType('StringMatch', (_message.Message,), dict(
  DESCRIPTOR = _STRINGMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:StringMatch)
  ))
_sym_db.RegisterMessage(StringMatch)

PathMatch = _reflection.GeneratedProtocolMessageType('PathMatch', (_message.Message,), dict(
  DESCRIPTOR = _PATHMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:PathMatch)
  ))
_sym_db.RegisterMessage(PathMatch)

QueryMatch = _reflection.GeneratedProtocolMessageType('QueryMatch', (_message.Message,), dict(
  DESCRIPTOR = _QUERYMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:QueryMatch)
  ))
_sym_db.RegisterMessage(QueryMatch)

HdrMatch = _reflection.GeneratedProtocolMessageType('HdrMatch', (_message.Message,), dict(
  DESCRIPTOR = _HDRMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:HdrMatch)
  ))
_sym_db.RegisterMessage(HdrMatch)

CookieMatch = _reflection.GeneratedProtocolMessageType('CookieMatch', (_message.Message,), dict(
  DESCRIPTOR = _COOKIEMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:CookieMatch)
  ))
_sym_db.RegisterMessage(CookieMatch)

HostHdrMatch = _reflection.GeneratedProtocolMessageType('HostHdrMatch', (_message.Message,), dict(
  DESCRIPTOR = _HOSTHDRMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:HostHdrMatch)
  ))
_sym_db.RegisterMessage(HostHdrMatch)

LocationHdrMatch = _reflection.GeneratedProtocolMessageType('LocationHdrMatch', (_message.Message,), dict(
  DESCRIPTOR = _LOCATIONHDRMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:LocationHdrMatch)
  ))
_sym_db.RegisterMessage(LocationHdrMatch)

HTTPStatusRange = _reflection.GeneratedProtocolMessageType('HTTPStatusRange', (_message.Message,), dict(
  DESCRIPTOR = _HTTPSTATUSRANGE,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:HTTPStatusRange)
  ))
_sym_db.RegisterMessage(HTTPStatusRange)

HTTPStatusMatch = _reflection.GeneratedProtocolMessageType('HTTPStatusMatch', (_message.Message,), dict(
  DESCRIPTOR = _HTTPSTATUSMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:HTTPStatusMatch)
  ))
_sym_db.RegisterMessage(HTTPStatusMatch)

MatchTarget = _reflection.GeneratedProtocolMessageType('MatchTarget', (_message.Message,), dict(
  DESCRIPTOR = _MATCHTARGET,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:MatchTarget)
  ))
_sym_db.RegisterMessage(MatchTarget)

ResponseMatchTarget = _reflection.GeneratedProtocolMessageType('ResponseMatchTarget', (_message.Message,), dict(
  DESCRIPTOR = _RESPONSEMATCHTARGET,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:ResponseMatchTarget)
  ))
_sym_db.RegisterMessage(ResponseMatchTarget)

MicroServiceGroup = _reflection.GeneratedProtocolMessageType('MicroServiceGroup', (_message.Message,), dict(
  DESCRIPTOR = _MICROSERVICEGROUP,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:MicroServiceGroup)
  ))
_sym_db.RegisterMessage(MicroServiceGroup)

MicroServiceMatch = _reflection.GeneratedProtocolMessageType('MicroServiceMatch', (_message.Message,), dict(
  DESCRIPTOR = _MICROSERVICEMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:MicroServiceMatch)
  ))
_sym_db.RegisterMessage(MicroServiceMatch)

AppTagMatch = _reflection.GeneratedProtocolMessageType('AppTagMatch', (_message.Message,), dict(
  DESCRIPTOR = _APPTAGMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:AppTagMatch)
  ))
_sym_db.RegisterMessage(AppTagMatch)

AppTenantMatch = _reflection.GeneratedProtocolMessageType('AppTenantMatch', (_message.Message,), dict(
  DESCRIPTOR = _APPTENANTMATCH,
  __module__ = 'match_pb2'
  # @@protoc_insertion_point(class_scope:AppTenantMatch)
  ))
_sym_db.RegisterMessage(AppTenantMatch)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\030com.avinetworks.protobuf\210\001\001'))
_STRINGGROUPTYPE.values_by_name["SG_TYPE_STRING"].has_options = True
_STRINGGROUPTYPE.values_by_name["SG_TYPE_STRING"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"&StringGroup is a collection of Strings'))
_STRINGGROUPTYPE.values_by_name["SG_TYPE_KEYVAL"].has_options = True
_STRINGGROUPTYPE.values_by_name["SG_TYPE_KEYVAL"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\212\227\"0StringGroup is a collection of (Key,Value) pairs'))
_IPADDRGROUP.fields_by_name['uuid'].has_options = True
_IPADDRGROUP.fields_by_name['uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\034UUID of the IP address group'))
_IPADDRGROUP.fields_by_name['name'].has_options = True
_IPADDRGROUP.fields_by_name['name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\034Name of the IP address group'))
_IPADDRGROUP.fields_by_name['addrs'].has_options = True
_IPADDRGROUP.fields_by_name['addrs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Configure IP address(es)\320\247\035\001'))
_IPADDRGROUP.fields_by_name['ranges'].has_options = True
_IPADDRGROUP.fields_by_name['ranges']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\035Configure IP address range(s)'))
_IPADDRGROUP.fields_by_name['prefixes'].has_options = True
_IPADDRGROUP.fields_by_name['prefixes']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\037Configure IP address prefix(es)'))
_IPADDRGROUP.fields_by_name['country_codes'].has_options = True
_IPADDRGROUP.fields_by_name['country_codes']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035EPopulate the IP address ranges from the geo database for this country'))
_IPADDRGROUP.fields_by_name['apic_epg_name'].has_options = True
_IPADDRGROUP.fields_by_name['apic_epg_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0359Populate IP addresses from members of this Cisco APIC EPG'))
_IPADDRGROUP.fields_by_name['ip_ports'].has_options = True
_IPADDRGROUP.fields_by_name['ip_ports']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Configure (IP address, port) tuple(s)'))
_IPADDRGROUP.fields_by_name['marathon_app_name'].has_options = True
_IPADDRGROUP.fields_by_name['marathon_app_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0355Populate IP addresses from tasks of this Marathon app'))
_IPADDRGROUP.fields_by_name['marathon_service_port'].has_options = True
_IPADDRGROUP.fields_by_name['marathon_service_port']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\220\001Task port associated with marathon service port. If Marathon app has multiple service ports, this is required. Else, the first task port is used'))
_IPADDRGROUP.fields_by_name['tenant_uuid'].has_options = True
_IPADDRGROUP.fields_by_name['tenant_uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\232\246\035\006Tenant'))
_IPADDRGROUP.has_options = True
_IPADDRGROUP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\262\246\035\020IpAddrGroupCheck\272\246\035\024IpAddrGroupTransform\220\227\"\001'))
_KEYVALUE.fields_by_name['key'].has_options = True
_KEYVALUE.fields_by_name['key']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\003Key'))
_KEYVALUE.fields_by_name['value'].has_options = True
_KEYVALUE.fields_by_name['value']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\005Value'))
_KEYVALUE.has_options = True
_KEYVALUE._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\232\246\035\003key'))
_STRINGGROUP.fields_by_name['uuid'].has_options = True
_STRINGGROUP.fields_by_name['uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030UUID of the string group'))
_STRINGGROUP.fields_by_name['name'].has_options = True
_STRINGGROUP.fields_by_name['name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Name of the string group'))
_STRINGGROUP.fields_by_name['kv'].has_options = True
_STRINGGROUP.fields_by_name['kv']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\'Configure Key:Value in the string group'))
_STRINGGROUP.fields_by_name['type'].has_options = True
_STRINGGROUP.fields_by_name['type']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\024Type of StringGroup.'))
_STRINGGROUP.fields_by_name['tenant_uuid'].has_options = True
_STRINGGROUP.fields_by_name['tenant_uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\232\246\035\006Tenant'))
_STRINGGROUP.has_options = True
_STRINGGROUP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\262\246\035\020StringGroupCheck'))
_IPADDRMATCH.fields_by_name['match_criteria'].has_options = True
_IPADDRMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0359Criterion to use for IP address matching the HTTP request'))
_IPADDRMATCH.fields_by_name['addrs'].has_options = True
_IPADDRMATCH.fields_by_name['addrs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\016IP address(es)'))
_IPADDRMATCH.fields_by_name['ranges'].has_options = True
_IPADDRMATCH.fields_by_name['ranges']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\023IP address range(s)'))
_IPADDRMATCH.fields_by_name['prefixes'].has_options = True
_IPADDRMATCH.fields_by_name['prefixes']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\025IP address prefix(es)'))
_IPADDRMATCH.fields_by_name['group_uuids'].has_options = True
_IPADDRMATCH.fields_by_name['group_uuids']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\013IpAddrGroup\242\246\035\033UUID of IP address group(s)'))
_PORTMATCH.fields_by_name['match_criteria'].has_options = True
_PORTMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0353Criterion to use for port matching the HTTP request'))
_PORTMATCH.fields_by_name['ports'].has_options = True
_PORTMATCH.fields_by_name['ports']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\300\246\035\001\242\246\035\025Listening TCP port(s)\262\246\035\0071-65535'))
_PROTOCOLMATCH.fields_by_name['match_criteria'].has_options = True
_PROTOCOLMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0357Criterion to use for protocol matching the HTTP request'))
_PROTOCOLMATCH.fields_by_name['protocols'].has_options = True
_PROTOCOLMATCH.fields_by_name['protocols']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026HTTP or HTTPS protocol'))
_METHODMATCH.fields_by_name['match_criteria'].has_options = True
_METHODMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035HCriterion to use for HTTP method matching the method in the HTTP request'))
_METHODMATCH.fields_by_name['methods'].has_options = True
_METHODMATCH.fields_by_name['methods']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\300\246\035\001\242\246\035\030Configure HTTP method(s)'))
_HTTPVERSIONMATCH.fields_by_name['match_criteria'].has_options = True
_HTTPVERSIONMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035OCriterion to use for HTTP version matching the version used in the HTTP request'))
_HTTPVERSIONMATCH.fields_by_name['versions'].has_options = True
_HTTPVERSIONMATCH.fields_by_name['versions']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\300\246\035\001\242\246\035\025HTTP protocol version'))
_STRINGMATCH.fields_by_name['match_criteria'].has_options = True
_STRINGMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0355Criterion to use for string matching the HTTP request'))
_STRINGMATCH.fields_by_name['match_str'].has_options = True
_STRINGMATCH.fields_by_name['match_str']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\017String value(s)\300\247\035\001'))
_STRINGMATCH.fields_by_name['string_group_uuids'].has_options = True
_STRINGMATCH.fields_by_name['string_group_uuids']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\013StringGroup\242\246\035\033UUID of the string group(s)'))
_PATHMATCH.fields_by_name['match_criteria'].has_options = True
_PATHMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035>Criterion to use for matching the path in the HTTP request URI'))
_PATHMATCH.fields_by_name['match_case'].has_options = True
_PATHMATCH.fields_by_name['match_case']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035(Case sensitivity to use for the matching'))
_PATHMATCH.fields_by_name['match_str'].has_options = True
_PATHMATCH.fields_by_name['match_str']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\rString values\300\247\035\001'))
_PATHMATCH.fields_by_name['string_group_uuids'].has_options = True
_PATHMATCH.fields_by_name['string_group_uuids']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\013StringGroup\242\246\035\033UUID of the string group(s)'))
_QUERYMATCH.fields_by_name['match_criteria'].has_options = True
_QUERYMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035;Criterion to use for matching the query in HTTP request URI'))
_QUERYMATCH.fields_by_name['match_case'].has_options = True
_QUERYMATCH.fields_by_name['match_case']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))
_QUERYMATCH.fields_by_name['match_str'].has_options = True
_QUERYMATCH.fields_by_name['match_str']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\017String value(s)\300\247\035\001'))
_QUERYMATCH.fields_by_name['string_group_uuids'].has_options = True
_QUERYMATCH.fields_by_name['string_group_uuids']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\013StringGroup\242\246\035\033UUID of the string group(s)'))
_HDRMATCH.fields_by_name['match_criteria'].has_options = True
_HDRMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0359Criterion to use for matching headers in the HTTP request'))
_HDRMATCH.fields_by_name['hdr'].has_options = True
_HDRMATCH.fields_by_name['hdr']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0354Name of the HTTP header whose value is to be matched'))
_HDRMATCH.fields_by_name['match_case'].has_options = True
_HDRMATCH.fields_by_name['match_case']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))
_HDRMATCH.fields_by_name['value'].has_options = True
_HDRMATCH.fields_by_name['value']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035)String values to match in the HTTP header\300\247\035\001'))
_HDRMATCH.has_options = True
_HDRMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\302\246\035\014MatchDefault'))
_COOKIEMATCH.fields_by_name['match_criteria'].has_options = True
_COOKIEMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035<Criterion to use for matching the cookie in the HTTP request'))
_COOKIEMATCH.fields_by_name['name'].has_options = True
_COOKIEMATCH.fields_by_name['name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\022Name of the cookie'))
_COOKIEMATCH.fields_by_name['match_case'].has_options = True
_COOKIEMATCH.fields_by_name['match_case']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))
_COOKIEMATCH.fields_by_name['value'].has_options = True
_COOKIEMATCH.fields_by_name['value']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\032String value in the cookie\300\247\035\001'))
_COOKIEMATCH.has_options = True
_COOKIEMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\302\246\035\014MatchDefault'))
_HOSTHDRMATCH.fields_by_name['match_criteria'].has_options = True
_HOSTHDRMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0350Criterion to use for the host header value match'))
_HOSTHDRMATCH.fields_by_name['match_case'].has_options = True
_HOSTHDRMATCH.fields_by_name['match_case']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))
_HOSTHDRMATCH.fields_by_name['value'].has_options = True
_HOSTHDRMATCH.fields_by_name['value']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\"String value(s) in the host header\300\247\035\001'))
_HOSTHDRMATCH.has_options = True
_HOSTHDRMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\302\246\035\014MatchDefault'))
_LOCATIONHDRMATCH.fields_by_name['match_criteria'].has_options = True
_LOCATIONHDRMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035HCriterion to use for matching location header value in the HTTP response'))
_LOCATIONHDRMATCH.fields_by_name['match_case'].has_options = True
_LOCATIONHDRMATCH.fields_by_name['match_case']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035%Case sensitivity to use for the match'))
_LOCATIONHDRMATCH.fields_by_name['value'].has_options = True
_LOCATIONHDRMATCH.fields_by_name['value']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035&String value(s) in the location header\300\247\035\001'))
_LOCATIONHDRMATCH.has_options = True
_LOCATIONHDRMATCH._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\302\246\035\014MatchDefault'))
_HTTPSTATUSRANGE.fields_by_name['begin'].has_options = True
_HTTPSTATUSRANGE.fields_by_name['begin']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\"Starting HTTP response status code'))
_HTTPSTATUSRANGE.fields_by_name['end'].has_options = True
_HTTPSTATUSRANGE.fields_by_name['end']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035 Ending HTTP response status code'))
_HTTPSTATUSMATCH.fields_by_name['match_criteria'].has_options = True
_HTTPSTATUSMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035>Criterion to use for matching the HTTP response status code(s)'))
_HTTPSTATUSMATCH.fields_by_name['status_codes'].has_options = True
_HTTPSTATUSMATCH.fields_by_name['status_codes']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\034HTTP response status code(s)'))
_HTTPSTATUSMATCH.fields_by_name['ranges'].has_options = True
_HTTPSTATUSMATCH.fields_by_name['ranges']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\"HTTP response status code range(s)'))
_MATCHTARGET.fields_by_name['client_ip'].has_options = True
_MATCHTARGET.fields_by_name['client_ip']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\035Configure client ip addresses'))
_MATCHTARGET.fields_by_name['vs_port'].has_options = True
_MATCHTARGET.fields_by_name['vs_port']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\037Configure virtual service ports'))
_MATCHTARGET.fields_by_name['protocol'].has_options = True
_MATCHTARGET.fields_by_name['protocol']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035#Configure the type of HTTP protocol'))
_MATCHTARGET.fields_by_name['method'].has_options = True
_MATCHTARGET.fields_by_name['method']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026Configure HTTP methods'))
_MATCHTARGET.fields_by_name['version'].has_options = True
_MATCHTARGET.fields_by_name['version']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\'Configure versions of the HTTP protocol'))
_MATCHTARGET.fields_by_name['path'].has_options = True
_MATCHTARGET.fields_by_name['path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Configure request paths'))
_MATCHTARGET.fields_by_name['query'].has_options = True
_MATCHTARGET.fields_by_name['query']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Configure request query'))
_MATCHTARGET.fields_by_name['hdrs'].has_options = True
_MATCHTARGET.fields_by_name['hdrs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Configure HTTP header(s)'))
_MATCHTARGET.fields_by_name['cookie'].has_options = True
_MATCHTARGET.fields_by_name['cookie']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Configure HTTP cookie(s)'))
_MATCHTARGET.fields_by_name['host_hdr'].has_options = True
_MATCHTARGET.fields_by_name['host_hdr']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\031Configure the host header'))
_RESPONSEMATCHTARGET.fields_by_name['client_ip'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['client_ip']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\035Configure client ip addresses'))
_RESPONSEMATCHTARGET.fields_by_name['vs_port'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['vs_port']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\037Configure virtual service ports'))
_RESPONSEMATCHTARGET.fields_by_name['protocol'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['protocol']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035#Configure the type of HTTP protocol'))
_RESPONSEMATCHTARGET.fields_by_name['method'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['method']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026Configure HTTP methods'))
_RESPONSEMATCHTARGET.fields_by_name['version'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['version']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\'Configure versions of the HTTP protocol'))
_RESPONSEMATCHTARGET.fields_by_name['path'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Configure request paths'))
_RESPONSEMATCHTARGET.fields_by_name['query'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['query']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\027Configure request query'))
_RESPONSEMATCHTARGET.fields_by_name['hdrs'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['hdrs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\026Configure HTTP headers'))
_RESPONSEMATCHTARGET.fields_by_name['cookie'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['cookie']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\030Configure HTTP cookie(s)'))
_RESPONSEMATCHTARGET.fields_by_name['host_hdr'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['host_hdr']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\031Configure the host header'))
_RESPONSEMATCHTARGET.fields_by_name['loc_hdr'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['loc_hdr']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\035Configure the location header'))
_RESPONSEMATCHTARGET.fields_by_name['status'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['status']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035!Configure the HTTP status code(s)'))
_RESPONSEMATCHTARGET.fields_by_name['rsp_hdrs'].has_options = True
_RESPONSEMATCHTARGET.fields_by_name['rsp_hdrs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035&Configure the HTTP headers in response'))
_MICROSERVICEGROUP.fields_by_name['uuid'].has_options = True
_MICROSERVICEGROUP.fields_by_name['uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\036UUID of the MicroService group'))
_MICROSERVICEGROUP.fields_by_name['name'].has_options = True
_MICROSERVICEGROUP.fields_by_name['name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\036Name of the MicroService group'))
_MICROSERVICEGROUP.fields_by_name['service_uuids'].has_options = True
_MICROSERVICEGROUP.fields_by_name['service_uuids']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\014MicroService\242\246\035\032Configure MicroService(es)'))
_MICROSERVICEGROUP.fields_by_name['created_by'].has_options = True
_MICROSERVICEGROUP.fields_by_name['created_by']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\014Creator name'))
_MICROSERVICEGROUP.fields_by_name['tenant_uuid'].has_options = True
_MICROSERVICEGROUP.fields_by_name['tenant_uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\232\246\035\006Tenant'))
_MICROSERVICEGROUP.has_options = True
_MICROSERVICEGROUP._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\220\227\"\001'))
_MICROSERVICEMATCH.fields_by_name['match_criteria'].has_options = True
_MICROSERVICEMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035<Criterion to use for Micro Service matching the HTTP request'))
_MICROSERVICEMATCH.fields_by_name['group_uuid'].has_options = True
_MICROSERVICEMATCH.fields_by_name['group_uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212\246\035\021MicroServiceGroup\330\247\035\001\242\246\035\036UUID of Micro Service group(s)'))
_APPTAGMATCH.fields_by_name['match_criteria'].has_options = True
_APPTAGMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\022Match the tag name'))
_APPTAGMATCH.fields_by_name['tag'].has_options = True
_APPTAGMATCH.fields_by_name['tag']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\0350Tag name or reserved keywords: AllTags/MyTagApps'))
_APPTENANTMATCH.fields_by_name['match_criteria'].has_options = True
_APPTENANTMATCH.fields_by_name['match_criteria']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\025Match the tenant UUID'))
_APPTENANTMATCH.fields_by_name['tenant_name'].has_options = True
_APPTENANTMATCH.fields_by_name['tenant_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035\023Name of the tenant '))
_APPTENANTMATCH.fields_by_name['tenant_uuid'].has_options = True
_APPTENANTMATCH.fields_by_name['tenant_uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\242\246\035KTenant UUID or reserved keywords: AllTenants/MyTenantApps/MyTenantInstances'))
# @@protoc_insertion_point(module_scope)
